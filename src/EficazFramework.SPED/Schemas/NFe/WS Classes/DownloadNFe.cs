// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>EficazFramework.SPED</NameSpace><Collection>List</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>True</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace EficazFrameworkCore.SPED.Schemas.NFe
{
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "downloadNFe", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class PedidoDownloadNF : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private Ambiente tpAmbField;
        private string xServField = "DOWNLOAD NFE";
        private string cNPJField;
        private string chNFeField;
        private VersaoServicoDownload versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("tpAmb")]
        public Ambiente Ambiente
        {
            get
            {
                return tpAmbField;
            }

            set
            {
                if (tpAmbField.Equals(value) != true)
                {
                    tpAmbField = value;
                    OnPropertyChanged("Ambiente");
                }
            }
        }

        [XmlElement("xServ")]
        public string Servico
        {
            get
            {
                return xServField;
            }

            set
            {
                if (xServField.Equals(value) != true)
                {
                    xServField = value;
                    OnPropertyChanged("Servico");
                }
            }
        }

        [XmlElement("CNPJ")]
        public string CNPJ
        {
            get
            {
                return cNPJField;
            }

            set
            {
                if (cNPJField is null || cNPJField.Equals(value) != true)
                {
                    cNPJField = value;
                    OnPropertyChanged("CNPJ");
                }
            }
        }

        [XmlElement("chNFe")]
        public string ChaveNFe
        {
            get
            {
                return chNFeField;
            }

            set
            {
                if (chNFeField is null || chNFeField.Equals(value) != true)
                {
                    chNFeField = value;
                    OnPropertyChanged("ChaveNFe");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public VersaoServicoDownload Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(PedidoDownloadNF));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref PedidoDownloadNF obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref PedidoDownloadNF obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static PedidoDownloadNF Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (PedidoDownloadNF)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PedidoDownloadNF Deserialize(System.IO.Stream s)
        {
            return (PedidoDownloadNF)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref PedidoDownloadNF obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref PedidoDownloadNF obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static PedidoDownloadNF LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<PedidoDownloadNF> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "retDownloadNFe", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class RetornoDownloadNF : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public RetornoDownloadNF() : base()
        {
            retNFeField = new List<RetornoNFe>();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private Ambiente tpAmbField;
        private string verAplicField;
        private string cStatField;
        private string xMotivoField;
        private DateTime dhRespField;
        private List<RetornoNFe> retNFeField;
        private VersaoServicoDownload versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("tpAmb")]
        public Ambiente Ambiente
        {
            get
            {
                return tpAmbField;
            }

            set
            {
                if (tpAmbField.Equals(value) != true)
                {
                    tpAmbField = value;
                    OnPropertyChanged("Ambiente");
                }
            }
        }

        [XmlElement("verAplic")]
        public string VersaoAplicativo
        {
            get
            {
                return verAplicField;
            }

            set
            {
                if (verAplicField is null || verAplicField.Equals(value) != true)
                {
                    verAplicField = value;
                    OnPropertyChanged("VersaoAplicativo");
                }
            }
        }

        [XmlElement("cStat")]
        public string RetornoCodigo
        {
            get
            {
                return cStatField;
            }

            set
            {
                if (cStatField is null || cStatField.Equals(value) != true)
                {
                    cStatField = value;
                    OnPropertyChanged("RetornoCodigo");
                }
            }
        }

        [XmlElement("xMotivo")]
        public string RetornoDescricao
        {
            get
            {
                return xMotivoField;
            }

            set
            {
                if (xMotivoField is null || xMotivoField.Equals(value) != true)
                {
                    xMotivoField = value;
                    OnPropertyChanged("RetornoDescricao");
                }
            }
        }

        [XmlElement("dhResp")]
        public DateTime RetornoDataHora
        {
            get
            {
                return dhRespField;
            }

            set
            {
                if (dhRespField.Equals(value) != true)
                {
                    dhRespField = value;
                    OnPropertyChanged("RetornoDataHora");
                }
            }
        }

        [XmlElement("retNFe")]
        public List<RetornoNFe> Retorno
        {
            get
            {
                return retNFeField;
            }

            set
            {
                if (retNFeField is null || retNFeField.Equals(value) != true)
                {
                    retNFeField = value;
                    OnPropertyChanged("Retorno");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public VersaoServicoDownload Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(RetornoDownloadNF));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref RetornoDownloadNF obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref RetornoDownloadNF obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static RetornoDownloadNF Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (RetornoDownloadNF)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RetornoDownloadNF Deserialize(System.IO.Stream s)
        {
            return (RetornoDownloadNF)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoDownloadNF obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoDownloadNF obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static RetornoDownloadNF LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<RetornoDownloadNF> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "TRetDownloadNFeRetNFe", AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class RetornoNFe : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string chNFeField;
        private string cStatField;
        private string xMotivoField;
        private object itemFieldxml;
        private object itemField; // ProcessoNFe
        //private ProcessoNFeBase _resultadoNovo;
        private static XmlSerializer sSerializer;
        //private object _tmp;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("chNFe")]
        public string ChaveNFe
        {
            get
            {
                return chNFeField;
            }

            set
            {
                if (chNFeField is null || chNFeField.Equals(value) != true)
                {
                    chNFeField = value;
                    OnPropertyChanged("ChaveNFe");
                }
            }
        }

        [XmlElement("cStat")]
        public string ResultadoCodigo
        {
            get
            {
                return cStatField;
            }

            set
            {
                if (cStatField is null || cStatField.Equals(value) != true)
                {
                    cStatField = value;
                    OnPropertyChanged("ResultadoCodigo");
                }
            }
        }

        [XmlElement("xMotivo")]
        public string ResultadoDescricao
        {
            get
            {
                return xMotivoField;
            }

            set
            {
                if (xMotivoField is null || xMotivoField.Equals(value) != true)
                {
                    xMotivoField = value;
                    OnPropertyChanged("ResultadoDescricao");
                }
            }
        }

        [XmlElement("procNFeGrupoZip", typeof(NFeGrupoZip))]
        [XmlElement("procNFeZip", typeof(byte[]), DataType = "base64Binary")]
        public object ResultadoXML
        {
            get
            {
                return itemFieldxml;
            }

            set
            {
                if (itemFieldxml is null || itemField.Equals(value) != true)
                {
                    itemFieldxml = value;
                    OnPropertyChanged("ResultadoXML");
                }
            }
        }

        // <System.Xml.Serialization.XmlElementAttribute("procNFe")>
        // Public Property Resultado() As ProcessoNFe
        // Get
        // Return Me.itemField
        // End Get
        // Set(value As ProcessoNFe)
        // If ((Me.itemField Is Nothing) _
        // OrElse (itemField.Equals(value) <> True)) Then
        // Me.itemField = value
        // Me.OnPropertyChanged("Resultado")
        // End If
        // End Set
        // End Property

        [XmlElement("procNFe")]
        public object Resultado
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("Resultado");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(RetornoNFe));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "TRetDownloadNFeRetNFeProcNFeGrupoZip", AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class NFeGrupoZip : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private byte[] nFeZipField;
        private byte[] protNFeZipField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("NFeZip", typeof(byte[]), DataType = "base64Binary", IsNullable = true)]
        public byte[] ZipData
        {
            get
            {
                return nFeZipField;
            }

            set
            {
                if (nFeZipField is null || nFeZipField.Equals(value) != true)
                {
                    nFeZipField = value;
                    OnPropertyChanged("ZipData");
                }
            }
        }

        [XmlElement("protNFeZip", typeof(byte[]), DataType = "base64Binary", IsNullable = true)]
        public byte[] ProtocoloAutorizacao
        {
            get
            {
                return protNFeZipField;
            }

            set
            {
                if (protNFeZipField is null || protNFeZipField.Equals(value) != true)
                {
                    protNFeZipField = value;
                    OnPropertyChanged("ProtocoloAutorizacao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(NFeGrupoZip));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }
}