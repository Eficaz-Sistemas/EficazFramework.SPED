// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.4.0.37595
// '    <NameSpace>ConsultaCadastro</NameSpace><Collection>ObservableCollection</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.Serialization;
using EficazFrameworkCore.Extensions;
using Microsoft.VisualBasic.CompilerServices;
// Imports EficazFramework.SPED.Attributes.Localization

namespace EficazFrameworkCore.SPED.Schemas.NFe
{

    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [XmlType("TConsCadInfConsXServ", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TConsCadInfConsXServ
    {

        /// <remarks/>
        [XmlEnum("CONS-CAD")]
        CONSCAD
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [XmlType(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TipoResultado
    {

        /// <remarks/>
        [Attributes.DisplayName("CNPJ")] // , False)>
        CNPJ,

        /// <remarks/>
        [Attributes.DisplayName("CPF")] // , False)>
        CPF,

        /// <remarks/>
        [Attributes.DisplayName("Inscrição Estadual")] // , False)>
        IE
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [XmlType("TRetConsCadInfConsInfCadCSit", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum Situacao
    {

        /// <remarks/>
        [XmlEnum("0")]
        NaoHabilitado,

        /// <remarks/>
        [XmlEnum("1")]
        Habilitado
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [XmlType("TRetConsCadInfConsInfCadIndCredNFe", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum CredenciamentoNFe
    {

        /// <remarks/>
        [XmlEnum("0")]
        NaoCredenciado,

        /// <remarks/>
        [XmlEnum("1")]
        Credenciado,

        /// <remarks/>
        [XmlEnum("2")]
        ObrigacaoTotal,

        /// <remarks/>
        [XmlEnum("3")]
        ObrigacaoParcial,

        /// <remarks/>
        [XmlEnum("4")]
        SemInformacao
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [XmlType("TRetConsCadInfConsInfCadIndCredCTe", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum CredenciamentoCte
    {

        /// <remarks/>
        [XmlEnum("0")]
        NaoCredenciado,

        /// <remarks/>
        [XmlEnum("1")]
        Credenciado,

        /// <remarks/>
        [XmlEnum("2")]
        ObrigacaoTotal,

        /// <remarks/>
        [XmlEnum("3")]
        ObrigacaoParcial,

        /// <remarks/>
        [XmlEnum("4")]
        SemInformacao
    }


    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType("http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot("ConsCad", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class TConsCad : INotifyPropertyChanged
    {
        private TConsCadInfCons infConsField;
        private VersaoServicoConsCadastro versaoField;
        private static XmlSerializer sSerializer;

        public TConsCad() : base()
        {
            infConsField = new TConsCadInfCons();
        }

        [XmlElement(Order = 0)]
        public TConsCadInfCons infCons
        {
            get
            {
                return infConsField;
            }

            set
            {
                if (infConsField != null)
                {
                    if (infConsField.Equals(value) != true)
                    {
                        infConsField = value;
                        OnPropertyChanged("infCons");
                    }
                }
                else
                {
                    infConsField = value;
                    OnPropertyChanged("infCons");
                }
            }
        }

        [XmlAttribute("versao")]
        public VersaoServicoConsCadastro versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(TConsCad));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref TConsCad obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref TConsCad obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static TConsCad Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (TConsCad)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TConsCad Deserialize(System.IO.Stream s)
        {
            return (TConsCad)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref TConsCad obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref TConsCad obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static TConsCad LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<TConsCad> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType("TConsCadInfCons", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TConsCadInfCons : INotifyPropertyChanged
    {
        private TConsCadInfConsXServ xServField;
        private Estado ufField;
        private string itemField;
        private TipoResultado itemElementNameField;

        [XmlElement(Order = 0)]
        public TConsCadInfConsXServ xServ
        {
            get
            {
                return xServField;
            }

            set
            {
                if (xServField.Equals(value) != true)
                {
                    xServField = value;
                    OnPropertyChanged("xServ");
                }
            }
        }

        [XmlElement(Order = 1)]
        public Estado UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        [XmlElement("CNPJ", typeof(string), Order = 2)]
        [XmlElement("CPF", typeof(string), Order = 2)]
        [XmlElement("IE", typeof(string), Order = 2)]
        [XmlChoiceIdentifier("ItemElementName")]
        public string Item
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField != null)
                {
                    if (itemField.Equals(value) != true)
                    {
                        itemField = value;
                        OnPropertyChanged("Item");
                    }
                }
                else
                {
                    itemField = value;
                    OnPropertyChanged("Item");
                }
            }
        }

        [XmlElement(Order = 3)]
        [XmlIgnore()]
        public TipoResultado ItemElementName
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("ItemElementName");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot("retConsCad", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class RetornoConsultaCadastro : INotifyPropertyChanged
    {
        private TRetConsCadInfCons infConsField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        public RetornoConsultaCadastro() : base()
        {
            infConsField = new TRetConsCadInfCons();
        }

        [XmlElement("infCons")]
        public TRetConsCadInfCons Informacoes
        {
            get
            {
                return infConsField;
            }

            set
            {
                if (infConsField != null)
                {
                    if (infConsField.Equals(value) != true)
                    {
                        infConsField = value;
                        OnPropertyChanged("Informacoes");
                    }
                }
                else
                {
                    infConsField = value;
                    OnPropertyChanged("Informacoes");
                }
            }
        }

        [XmlAttribute(DataType = "token")]
        public string versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField != null)
                {
                    if (versaoField.Equals(value) != true)
                    {
                        versaoField = value;
                        OnPropertyChanged("versao");
                    }
                }
                else
                {
                    versaoField = value;
                    OnPropertyChanged("versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(RetornoConsultaCadastro));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref RetornoConsultaCadastro obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref RetornoConsultaCadastro obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static RetornoConsultaCadastro Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (RetornoConsultaCadastro)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
                return null;
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RetornoConsultaCadastro Deserialize(System.IO.Stream s)
        {
            return (RetornoConsultaCadastro)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoConsultaCadastro obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoConsultaCadastro obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static RetornoConsultaCadastro LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<RetornoConsultaCadastro> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType("TRetConsCadInfCons", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetConsCadInfCons : INotifyPropertyChanged
    {
        private string verAplicField;
        private string cStatField;
        private string xMotivoField;
        private string ufField;
        private string itemField;
        private TipoResultado itemElementNameField;
        private DateTime dhConsField;
        private OrgaoIBGE cUFField;
        private ObservableCollection<TRetConsCadInfConsInfCad> infCadField;

        public TRetConsCadInfCons() : base()
        {
            infCadField = new ObservableCollection<TRetConsCadInfConsInfCad>();
        }

        [XmlElement()]
        public string verAplic
        {
            get
            {
                return verAplicField;
            }

            set
            {
                if (verAplicField != null)
                {
                    if (verAplicField.Equals(value) != true)
                    {
                        verAplicField = value;
                        OnPropertyChanged("verAplic");
                    }
                }
                else
                {
                    verAplicField = value;
                    OnPropertyChanged("verAplic");
                }
            }
        }

        [XmlElement()]
        public string cStat
        {
            get
            {
                return cStatField;
            }

            set
            {
                if (cStatField != null)
                {
                    if (cStatField.Equals(value) != true)
                    {
                        cStatField = value;
                        OnPropertyChanged("cStat");
                    }
                }
                else
                {
                    cStatField = value;
                    OnPropertyChanged("cStat");
                }
            }
        }

        [XmlElement()]
        public string xMotivo
        {
            get
            {
                return xMotivoField;
            }

            set
            {
                if (xMotivoField != null)
                {
                    if (xMotivoField.Equals(value) != true)
                    {
                        xMotivoField = value;
                        OnPropertyChanged("xMotivo");
                    }
                }
                else
                {
                    xMotivoField = value;
                    OnPropertyChanged("xMotivo");
                }
            }
        }

        [XmlElement()]
        public string UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField != null)
                {
                    if (ufField.Equals(value) != true)
                    {
                        ufField = value;
                        OnPropertyChanged("UF");
                    }
                }
                else
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlElement("IE", typeof(string))]
        [XmlChoiceIdentifier("ItemElementName")]
        public string Item
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField != null)
                {
                    if (itemField.Equals(value) != true)
                    {
                        itemField = value;
                        OnPropertyChanged("Item");
                    }
                }
                else
                {
                    itemField = value;
                    OnPropertyChanged("Item");
                }
            }
        }

        [XmlElement()]
        [XmlIgnore()]
        public TipoResultado ItemElementName
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("ItemElementName");
                }
            }
        }

        [XmlElement()]
        public DateTime dhCons
        {
            get
            {
                return dhConsField;
            }

            set
            {
                if (dhConsField.Equals(value) != true)
                {
                    dhConsField = value;
                    OnPropertyChanged("dhCons");
                }
            }
        }

        [XmlElement()]
        public OrgaoIBGE cUF
        {
            get
            {
                return cUFField;
            }

            set
            {
                if (cUFField.Equals(value) != true)
                {
                    cUFField = value;
                    OnPropertyChanged("cUF");
                }
            }
        }

        [XmlElement("infCad")]
        public ObservableCollection<TRetConsCadInfConsInfCad> CadastrosRetornados
        {
            get
            {
                return infCadField;
            }

            set
            {
                if (infCadField != null)
                {
                    if (infCadField.Equals(value) != true)
                    {
                        infCadField = value;
                        OnPropertyChanged("infCad");
                    }
                }
                else
                {
                    infCadField = value;
                    OnPropertyChanged("infCad");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType("TRetConsCadInfConsInfCad", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetConsCadInfConsInfCad : INotifyPropertyChanged
    {
        private string ieField;
        private string itemField;
        private PersonalidadeJuridica itemElementNameField;
        private string ufField;
        private Situacao cSitField;
        private CredenciamentoNFe indCredNFeField;
        private CredenciamentoCte indCredCTeField;
        private string xNomeField;
        private string xFantField;
        private string xRegApurField;
        private string cNAEField;
        private string dIniAtivField;
        private bool dIniAtivFieldSpecified;
        private string dUltSitField;
        private bool dUltSitFieldSpecified;
        private string dBaixaField;
        private bool dBaixaFieldSpecified;
        private string iEUnicaField;
        private string iEAtualField;
        private TEndereco enderField;

        public TRetConsCadInfConsInfCad() : base()
        {
            enderField = new TEndereco();
        }

        [XmlElement()]
        public string IE
        {
            get
            {
                return ieField;
            }

            set
            {
                if (ieField != null)
                {
                    if (ieField.Equals(value) != true)
                    {
                        ieField = value;
                        OnPropertyChanged("IE");
                    }
                }
                else
                {
                    ieField = value;
                    OnPropertyChanged("IE");
                }
            }
        }

        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlChoiceIdentifier("ItemElementName")]
        public string CNPJ_CPF
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField != null)
                {
                    if (itemField.Equals(value) != true)
                    {
                        itemField = value;
                        OnPropertyChanged("CNPJ_CPF");
                    }
                }
                else
                {
                    itemField = value;
                    OnPropertyChanged("CNPJ_CPF");
                }
            }
        }

        public string CNPJ_CPF_Formatado
        {
            get
            {
                return CNPJ_CPF.FormatRFBDocument();
            }
        }

        [XmlElement()]
        [XmlIgnore()]
        public PersonalidadeJuridica ItemElementName
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("ItemElementName");
                }
            }
        }

        [XmlElement()]
        public string UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField != null)
                {
                    if (ufField.Equals(value) != true)
                    {
                        ufField = value;
                        OnPropertyChanged("UF");
                    }
                }
                else
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        [XmlIgnore()]
        public Estado? UFEnum
        {
            get
            {
                if (!(string.IsNullOrEmpty(ufField) | string.IsNullOrWhiteSpace(ufField)))
                {
                    return (Estado)Conversions.ToInteger(ufField);
                }
                else
                {
                    return default;
                }
            }
        }

        [XmlElement()]
        public Situacao cSit
        {
            get
            {
                return cSitField;
            }

            set
            {
                if (cSitField.Equals(value) != true)
                {
                    cSitField = value;
                    OnPropertyChanged("cSit");
                }
            }
        }

        [XmlElement()]
        public CredenciamentoNFe indCredNFe
        {
            get
            {
                return indCredNFeField;
            }

            set
            {
                if (indCredNFeField.Equals(value) != true)
                {
                    indCredNFeField = value;
                    OnPropertyChanged("indCredNFe");
                }
            }
        }

        [XmlElement()]
        public CredenciamentoCte indCredCTe
        {
            get
            {
                return indCredCTeField;
            }

            set
            {
                if (indCredCTeField.Equals(value) != true)
                {
                    indCredCTeField = value;
                    OnPropertyChanged("indCredCTe");
                }
            }
        }

        [XmlElement()]
        public string xNome
        {
            get
            {
                return xNomeField;
            }

            set
            {
                if (xNomeField != null)
                {
                    if (xNomeField.Equals(value) != true)
                    {
                        xNomeField = value;
                        OnPropertyChanged("xNome");
                    }
                }
                else
                {
                    xNomeField = value;
                    OnPropertyChanged("xNome");
                }
            }
        }

        [XmlElement()]
        public string xFant
        {
            get
            {
                return xFantField;
            }

            set
            {
                if (xFantField != null)
                {
                    if (xFantField.Equals(value) != true)
                    {
                        xFantField = value;
                        OnPropertyChanged("xFant");
                    }
                }
                else
                {
                    xFantField = value;
                    OnPropertyChanged("xFant");
                }
            }
        }

        [XmlElement(DataType = "token")]
        public string xRegApur
        {
            get
            {
                return xRegApurField;
            }

            set
            {
                if (xRegApurField != null)
                {
                    if (xRegApurField.Equals(value) != true)
                    {
                        xRegApurField = value;
                        OnPropertyChanged("xRegApur");
                    }
                }
                else
                {
                    xRegApurField = value;
                    OnPropertyChanged("xRegApur");
                }
            }
        }

        [XmlElement(DataType = "token")]
        public string CNAE
        {
            get
            {
                return cNAEField;
            }

            set
            {
                if (cNAEField != null)
                {
                    if (cNAEField.Equals(value) != true)
                    {
                        cNAEField = value;
                        OnPropertyChanged("CNAE");
                    }
                }
                else
                {
                    cNAEField = value;
                    OnPropertyChanged("CNAE");
                }
            }
        }

        public string dIniAtiv
        {
            get
            {
                return dIniAtivField;
            }

            set
            {
                dIniAtivField = value;
                OnPropertyChanged("dIniAtiv");
            }
        }

        [XmlIgnore()]
        public bool dIniAtivSpecified
        {
            get
            {
                return dIniAtivFieldSpecified;
            }

            set
            {
                if (dIniAtivFieldSpecified.Equals(value) != true)
                {
                    dIniAtivFieldSpecified = value;
                    OnPropertyChanged("dIniAtivSpecified");
                }
            }
        }

        public string dUltSit
        {
            get
            {
                return dUltSitField;
            }

            set
            {
                dUltSitField = value;
                OnPropertyChanged("dUltSit");
            }
        }

        [XmlIgnore()]
        public bool dUltSitSpecified
        {
            get
            {
                return dUltSitFieldSpecified;
            }

            set
            {
                if (dUltSitFieldSpecified.Equals(value) != true)
                {
                    dUltSitFieldSpecified = value;
                    OnPropertyChanged("dUltSitSpecified");
                }
            }
        }

        public string dBaixa
        {
            get
            {
                return dBaixaField;
            }

            set
            {
                dBaixaField = value;
                OnPropertyChanged("dBaixa");
            }
        }

        [XmlIgnore()]
        public bool dBaixaSpecified
        {
            get
            {
                return dBaixaFieldSpecified;
            }

            set
            {
                if (dBaixaFieldSpecified.Equals(value) != true)
                {
                    dBaixaFieldSpecified = value;
                    OnPropertyChanged("dBaixaSpecified");
                }
            }
        }

        [XmlElement()]
        public string IEUnica
        {
            get
            {
                return iEUnicaField;
            }

            set
            {
                if (iEUnicaField != null)
                {
                    if (iEUnicaField.Equals(value) != true)
                    {
                        iEUnicaField = value;
                        OnPropertyChanged("IEUnica");
                    }
                }
                else
                {
                    iEUnicaField = value;
                    OnPropertyChanged("IEUnica");
                }
            }
        }

        [XmlElement()]
        public string IEAtual
        {
            get
            {
                return iEAtualField;
            }

            set
            {
                if (iEAtualField != null)
                {
                    if (iEAtualField.Equals(value) != true)
                    {
                        iEAtualField = value;
                        OnPropertyChanged("IEAtual");
                    }
                }
                else
                {
                    iEAtualField = value;
                    OnPropertyChanged("IEAtual");
                }
            }
        }

        [XmlElement()]
        public TEndereco ender
        {
            get
            {
                return enderField;
            }

            set
            {
                if (enderField != null)
                {
                    if (enderField.Equals(value) != true)
                    {
                        enderField = value;
                        OnPropertyChanged("ender");
                    }
                }
                else
                {
                    enderField = value;
                    OnPropertyChanged("ender");
                }
            }
        }

        public override string ToString()
        {
            // Return MyBase.ToString()
            return string.Format("Nome: {0}; CNPJ / CPF: {1}; Inscrição Estadual: {2}; CNAE: {3}", xNome, CNPJ_CPF_Formatado, IE, CNAE);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18408")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType("TEndereco", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot("http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class TEndereco : INotifyPropertyChanged
    {
        private string xLgrField;
        private string nroField;
        private string xCplField;
        private string xBairroField;
        private string cMunField;
        private string xMunField;
        private string cEPField;

        [XmlElement()]
        public string xLgr
        {
            get
            {
                return xLgrField;
            }

            set
            {
                if (xLgrField != null)
                {
                    if (xLgrField.Equals(value) != true)
                    {
                        xLgrField = value;
                        OnPropertyChanged("xLgr");
                    }
                }
                else
                {
                    xLgrField = value;
                    OnPropertyChanged("xLgr");
                }
            }
        }

        [XmlElement()]
        public string nro
        {
            get
            {
                return nroField;
            }

            set
            {
                if (nroField != null)
                {
                    if (nroField.Equals(value) != true)
                    {
                        nroField = value;
                        OnPropertyChanged("nro");
                    }
                }
                else
                {
                    nroField = value;
                    OnPropertyChanged("nro");
                }
            }
        }

        [XmlElement()]
        public string xCpl
        {
            get
            {
                return xCplField;
            }

            set
            {
                if (xCplField != null)
                {
                    if (xCplField.Equals(value) != true)
                    {
                        xCplField = value;
                        OnPropertyChanged("xCpl");
                    }
                }
                else
                {
                    xCplField = value;
                    OnPropertyChanged("xCpl");
                }
            }
        }

        [XmlElement()]
        public string xBairro
        {
            get
            {
                return xBairroField;
            }

            set
            {
                if (xBairroField != null)
                {
                    if (xBairroField.Equals(value) != true)
                    {
                        xBairroField = value;
                        OnPropertyChanged("xBairro");
                    }
                }
                else
                {
                    xBairroField = value;
                    OnPropertyChanged("xBairro");
                }
            }
        }

        [XmlElement()]
        public string cMun
        {
            get
            {
                return cMunField;
            }

            set
            {
                if (cMunField != null)
                {
                    if (cMunField.Equals(value) != true)
                    {
                        cMunField = value;
                        OnPropertyChanged("cMun");
                    }
                }
                else
                {
                    cMunField = value;
                    OnPropertyChanged("cMun");
                }
            }
        }

        [XmlElement()]
        public string xMun
        {
            get
            {
                return xMunField;
            }

            set
            {
                if (xMunField != null)
                {
                    if (xMunField.Equals(value) != true)
                    {
                        xMunField = value;
                        OnPropertyChanged("xMun");
                    }
                }
                else
                {
                    xMunField = value;
                    OnPropertyChanged("xMun");
                }
            }
        }

        [XmlElement(DataType = "token")]
        public string CEP
        {
            get
            {
                return cEPField;
            }

            set
            {
                if (cEPField != null)
                {
                    if (cEPField.Equals(value) != true)
                    {
                        cEPField = value;
                        OnPropertyChanged("CEP");
                    }
                }
                else
                {
                    cEPField = value;
                    OnPropertyChanged("CEP");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}