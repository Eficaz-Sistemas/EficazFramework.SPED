// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>CTe.Services.Classes</NameSpace><Collection>ObservableCollection</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Microsoft.VisualBasic.CompilerServices;
// Imports EficazFrameworkCore.SPED.Schemas.NFe

namespace EficazFrameworkCore.SPED.Schemas.CTe
{
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/cte", IsNullable = false)]
    public partial class CTeRodoviario : INotifyPropertyChanged
    {
        private string rNTRCField;
        private DateTime? dPrevField;
        private rodoLota lotaField;
        private string cIOTField;
        private ObservableCollection<rodoOcc> occField;
        private ObservableCollection<rodoValePed> valePedField;
        private ObservableCollection<rodoVeic> veicField;
        private ObservableCollection<rodoLacRodo> lacRodoField;
        private ObservableCollection<rodoMoto> motoField;
        private static XmlSerializer sSerializer;

        public CTeRodoviario() : base()
        {
            motoField = new ObservableCollection<rodoMoto>();
            lacRodoField = new ObservableCollection<rodoLacRodo>();
            veicField = new ObservableCollection<rodoVeic>();
            valePedField = new ObservableCollection<rodoValePed>();
            occField = new ObservableCollection<rodoOcc>();
        }

        public string RNTRC
        {
            get
            {
                return rNTRCField;
            }

            set
            {
                if (rNTRCField is null || rNTRCField.Equals(value) != true)
                {
                    rNTRCField = value;
                    OnPropertyChanged("RNTRC");
                }
            }
        }

        [XmlIgnore()]
        public DateTime? DataPrevistaEntrega
        {
            get
            {
                return dPrevField;
            }

            set
            {
                if (dPrevField is null || dPrevField.Equals(value) != true)
                {
                    dPrevField = value;
                    OnPropertyChanged("DataPrevistaEntrega");
                }
            }
        }

        /// <summary>
        /// Campo em formato string para escrita do XML no padrão exigido pela NF-e
        /// Utilize o campo 'DataPrevistaEntrega' (Date?) para trabalho. Ambos estarão
        /// automaticamente em sincronia
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement("dPrev")]
        public string DataPrevistaEntregaXML
        {
            get
            {
                if (DataPrevistaEntrega.HasValue == true)
                {
                    return string.Format("{0:yyyy-MM-dd}", DataPrevistaEntrega);
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (dPrevField is null || dPrevField.Equals(value) != true)
                {
                    if (value != null)
                    {
                        var dt = value.Split("-");
                        dPrevField = new DateTime(Conversions.ToInteger(dt[0]), Conversions.ToInteger(dt[1]), Conversions.ToInteger(dt[2].Substring(0, 2)));
                    }
                    else
                    {
                        dPrevField = default;
                    }

                    OnPropertyChanged("DataPrevistaEntrega");
                }
            }
        }

        public bool ShouldSerializeDataPrevistaEntregaXML()
        {
            return dPrevField.HasValue;
        }

        public rodoLota lota
        {
            get
            {
                return lotaField;
            }

            set
            {
                if (lotaField.Equals(value) != true)
                {
                    lotaField = value;
                    OnPropertyChanged("lota");
                }
            }
        }

        public string CIOT
        {
            get
            {
                return cIOTField;
            }

            set
            {
                if (cIOTField is null || cIOTField.Equals(value) != true)
                {
                    cIOTField = value;
                    OnPropertyChanged("CIOT");
                }
            }
        }

        [XmlElement("occ")]
        public ObservableCollection<rodoOcc> occ
        {
            get
            {
                return occField;
            }

            set
            {
                if (occField is null || occField.Equals(value) != true)
                {
                    occField = value;
                    OnPropertyChanged("occ");
                }
            }
        }

        [XmlElement("valePed")]
        public ObservableCollection<rodoValePed> valePed
        {
            get
            {
                return valePedField;
            }

            set
            {
                if (valePedField is null || valePedField.Equals(value) != true)
                {
                    valePedField = value;
                    OnPropertyChanged("valePed");
                }
            }
        }

        [XmlElement("veic")]
        public ObservableCollection<rodoVeic> veic
        {
            get
            {
                return veicField;
            }

            set
            {
                if (veicField is null || veicField.Equals(value) != true)
                {
                    veicField = value;
                    OnPropertyChanged("veic");
                }
            }
        }

        [XmlElement("lacRodo")]
        public ObservableCollection<rodoLacRodo> lacRodo
        {
            get
            {
                return lacRodoField;
            }

            set
            {
                if (lacRodoField is null || lacRodoField.Equals(value) != true)
                {
                    lacRodoField = value;
                    OnPropertyChanged("lacRodo");
                }
            }
        }

        [XmlElement("moto")]
        public ObservableCollection<rodoMoto> moto
        {
            get
            {
                return motoField;
            }

            set
            {
                if (motoField is null || motoField.Equals(value) != true)
                {
                    motoField = value;
                    OnPropertyChanged("moto");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(CTeRodoviario));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref CTeRodoviario obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref CTeRodoviario obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static CTeRodoviario Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (CTeRodoviario)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), CTeRodoviario)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CTeRodoviario Deserialize(System.IO.Stream s)
        {
            return (CTeRodoviario)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref CTeRodoviario obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref CTeRodoviario obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static CTeRodoviario LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<CTeRodoviario> LoadFromAsync(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<CTeRodoviario> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoOcc : INotifyPropertyChanged
    {
        private string serieField;
        private string nOccField;
        private string dEmiField;
        private rodoOccEmiOcc emiOccField;
        private static XmlSerializer sSerializer;

        public rodoOcc() : base()
        {
            emiOccField = new rodoOccEmiOcc();
        }

        public string serie
        {
            get
            {
                return serieField;
            }

            set
            {
                if (serieField is null || serieField.Equals(value) != true)
                {
                    serieField = value;
                    OnPropertyChanged("serie");
                }
            }
        }

        public string nOcc
        {
            get
            {
                return nOccField;
            }

            set
            {
                if (nOccField is null || nOccField.Equals(value) != true)
                {
                    nOccField = value;
                    OnPropertyChanged("nOcc");
                }
            }
        }

        public string dEmi
        {
            get
            {
                return dEmiField;
            }

            set
            {
                if (dEmiField is null || dEmiField.Equals(value) != true)
                {
                    dEmiField = value;
                    OnPropertyChanged("dEmi");
                }
            }
        }

        public rodoOccEmiOcc emiOcc
        {
            get
            {
                return emiOccField;
            }

            set
            {
                if (emiOccField is null || emiOccField.Equals(value) != true)
                {
                    emiOccField = value;
                    OnPropertyChanged("emiOcc");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoOcc));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoOccEmiOcc : INotifyPropertyChanged
    {
        private string cNPJField;
        private string cIntField;
        private string ieField;
        private NFe.Estado ufField;
        private string foneField;
        private static XmlSerializer sSerializer;

        public string CNPJ
        {
            get
            {
                return cNPJField;
            }

            set
            {
                if (cNPJField is null || cNPJField.Equals(value) != true)
                {
                    cNPJField = value;
                    OnPropertyChanged("CNPJ");
                }
            }
        }

        public string cInt
        {
            get
            {
                return cIntField;
            }

            set
            {
                if (cIntField is null || cIntField.Equals(value) != true)
                {
                    cIntField = value;
                    OnPropertyChanged("cInt");
                }
            }
        }

        public string IE
        {
            get
            {
                return ieField;
            }

            set
            {
                if (ieField is null || ieField.Equals(value) != true)
                {
                    ieField = value;
                    OnPropertyChanged("IE");
                }
            }
        }

        public NFe.Estado UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        public string fone
        {
            get
            {
                return foneField;
            }

            set
            {
                if (foneField is null || foneField.Equals(value) != true)
                {
                    foneField = value;
                    OnPropertyChanged("fone");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoOccEmiOcc));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoValePed : INotifyPropertyChanged
    {
        private string cNPJFornField;
        private string nCompraField;
        private string cNPJPgField;
        private string vValePedField;
        private static XmlSerializer sSerializer;

        public string CNPJForn
        {
            get
            {
                return cNPJFornField;
            }

            set
            {
                if (cNPJFornField is null || cNPJFornField.Equals(value) != true)
                {
                    cNPJFornField = value;
                    OnPropertyChanged("CNPJForn");
                }
            }
        }

        public string nCompra
        {
            get
            {
                return nCompraField;
            }

            set
            {
                if (nCompraField is null || nCompraField.Equals(value) != true)
                {
                    nCompraField = value;
                    OnPropertyChanged("nCompra");
                }
            }
        }

        public string CNPJPg
        {
            get
            {
                return cNPJPgField;
            }

            set
            {
                if (cNPJPgField is null || cNPJPgField.Equals(value) != true)
                {
                    cNPJPgField = value;
                    OnPropertyChanged("CNPJPg");
                }
            }
        }

        public string vValePed
        {
            get
            {
                return vValePedField;
            }

            set
            {
                if (vValePedField is null || vValePedField.Equals(value) != true)
                {
                    vValePedField = value;
                    OnPropertyChanged("vValePed");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoValePed));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoVeic : INotifyPropertyChanged
    {
        private string cIntField;
        private string rENAVAMField;
        private string placaField;
        private string taraField;
        private string capKGField;
        private string capM3Field;
        private rodoVeicTpProp tpPropField;
        private rodoVeicTpVeic tpVeicField;
        private rodoVeicTpRod tpRodField;
        private rodoVeicTpCar tpCarField;
        private NFe.Estado ufField;
        private rodoVeicProp propField;
        private static XmlSerializer sSerializer;

        public rodoVeic() : base()
        {
            propField = new rodoVeicProp();
        }

        public string cInt
        {
            get
            {
                return cIntField;
            }

            set
            {
                if (cIntField is null || cIntField.Equals(value) != true)
                {
                    cIntField = value;
                    OnPropertyChanged("cInt");
                }
            }
        }

        public string RENAVAM
        {
            get
            {
                return rENAVAMField;
            }

            set
            {
                if (rENAVAMField is null || rENAVAMField.Equals(value) != true)
                {
                    rENAVAMField = value;
                    OnPropertyChanged("RENAVAM");
                }
            }
        }

        public string placa
        {
            get
            {
                return placaField;
            }

            set
            {
                if (placaField is null || placaField.Equals(value) != true)
                {
                    placaField = value;
                    OnPropertyChanged("placa");
                }
            }
        }

        public string tara
        {
            get
            {
                return taraField;
            }

            set
            {
                if (taraField is null || taraField.Equals(value) != true)
                {
                    taraField = value;
                    OnPropertyChanged("tara");
                }
            }
        }

        public string capKG
        {
            get
            {
                return capKGField;
            }

            set
            {
                if (capKGField is null || capKGField.Equals(value) != true)
                {
                    capKGField = value;
                    OnPropertyChanged("capKG");
                }
            }
        }

        public string capM3
        {
            get
            {
                return capM3Field;
            }

            set
            {
                if (capM3Field is null || capM3Field.Equals(value) != true)
                {
                    capM3Field = value;
                    OnPropertyChanged("capM3");
                }
            }
        }

        public rodoVeicTpProp tpProp
        {
            get
            {
                return tpPropField;
            }

            set
            {
                if (tpPropField.Equals(value) != true)
                {
                    tpPropField = value;
                    OnPropertyChanged("tpProp");
                }
            }
        }

        public rodoVeicTpVeic tpVeic
        {
            get
            {
                return tpVeicField;
            }

            set
            {
                if (tpVeicField.Equals(value) != true)
                {
                    tpVeicField = value;
                    OnPropertyChanged("tpVeic");
                }
            }
        }

        public rodoVeicTpRod tpRod
        {
            get
            {
                return tpRodField;
            }

            set
            {
                if (tpRodField.Equals(value) != true)
                {
                    tpRodField = value;
                    OnPropertyChanged("tpRod");
                }
            }
        }

        public rodoVeicTpCar tpCar
        {
            get
            {
                return tpCarField;
            }

            set
            {
                if (tpCarField.Equals(value) != true)
                {
                    tpCarField = value;
                    OnPropertyChanged("tpCar");
                }
            }
        }

        public NFe.Estado UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        public rodoVeicProp prop
        {
            get
            {
                return propField;
            }

            set
            {
                if (propField is null || propField.Equals(value) != true)
                {
                    propField = value;
                    OnPropertyChanged("prop");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoVeic));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public enum rodoVeicTpVeic
    {

        /// <remarks/>
        [XmlEnum("0")]
        Item0,

        /// <remarks/>
        [XmlEnum("1")]
        Item1
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public enum rodoVeicTpRod
    {

        /// <remarks/>
        [XmlEnum("00")]
        Item00,

        /// <remarks/>
        [XmlEnum("01")]
        Item01,

        /// <remarks/>
        [XmlEnum("02")]
        Item02,

        /// <remarks/>
        [XmlEnum("03")]
        Item03,

        /// <remarks/>
        [XmlEnum("04")]
        Item04,

        /// <remarks/>
        [XmlEnum("05")]
        Item05,

        /// <remarks/>
        [XmlEnum("06")]
        Item06
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public enum rodoVeicTpCar
    {

        /// <remarks/>
        [XmlEnum("00")]
        Item00,

        /// <remarks/>
        [XmlEnum("01")]
        Item01,

        /// <remarks/>
        [XmlEnum("02")]
        Item02,

        /// <remarks/>
        [XmlEnum("03")]
        Item03,

        /// <remarks/>
        [XmlEnum("04")]
        Item04,

        /// <remarks/>
        [XmlEnum("05")]
        Item05
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoVeicProp : INotifyPropertyChanged
    {
        private string itemField;
        private PersonalidadeJuridica7 itemElementNameField;
        private string rNTRCField;
        private string xNomeField;
        private string ieField;
        private NFe.Estado ufField;
        private rodoVeicPropTpProp tpPropField;
        private static XmlSerializer sSerializer;

        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlChoiceIdentifier("ItemElementName")]
        public string Item
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("Item");
                }
            }
        }

        [XmlIgnore()]
        public PersonalidadeJuridica7 ItemElementName
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("ItemElementName");
                }
            }
        }

        public string RNTRC
        {
            get
            {
                return rNTRCField;
            }

            set
            {
                if (rNTRCField is null || rNTRCField.Equals(value) != true)
                {
                    rNTRCField = value;
                    OnPropertyChanged("RNTRC");
                }
            }
        }

        public string xNome
        {
            get
            {
                return xNomeField;
            }

            set
            {
                if (xNomeField is null || xNomeField.Equals(value) != true)
                {
                    xNomeField = value;
                    OnPropertyChanged("xNome");
                }
            }
        }

        public string IE
        {
            get
            {
                return ieField;
            }

            set
            {
                if (ieField is null || ieField.Equals(value) != true)
                {
                    ieField = value;
                    OnPropertyChanged("IE");
                }
            }
        }

        public NFe.Estado UF
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("UF");
                }
            }
        }

        public rodoVeicPropTpProp tpProp
        {
            get
            {
                return tpPropField;
            }

            set
            {
                if (tpPropField.Equals(value) != true)
                {
                    tpPropField = value;
                    OnPropertyChanged("tpProp");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoVeicProp));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    // <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440"), _
    // System.SerializableAttribute(), _
    // System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.portalfiscal.inf.br/cte", IncludeInSchema:=False)> _
    // Public Enum PersonalidadeJuridica7

    // '''<remarks/>
    // CNPJ

    // '''<remarks/>
    // CPF
    // End Enum

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public enum rodoVeicPropTpProp
    {

        /// <remarks/>
        [XmlEnum("0")]
        Item0,

        /// <remarks/>
        [XmlEnum("1")]
        Item1,

        /// <remarks/>
        [XmlEnum("2")]
        Item2
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoLacRodo : INotifyPropertyChanged
    {
        private string nLacreField;
        private static XmlSerializer sSerializer;

        public string nLacre
        {
            get
            {
                return nLacreField;
            }

            set
            {
                if (nLacreField is null || nLacreField.Equals(value) != true)
                {
                    nLacreField = value;
                    OnPropertyChanged("nLacre");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoLacRodo));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/cte")]
    public partial class rodoMoto : INotifyPropertyChanged
    {
        private string xNomeField;
        private string cPFField;
        private static XmlSerializer sSerializer;

        public string xNome
        {
            get
            {
                return xNomeField;
            }

            set
            {
                if (xNomeField is null || xNomeField.Equals(value) != true)
                {
                    xNomeField = value;
                    OnPropertyChanged("xNome");
                }
            }
        }

        public string CPF
        {
            get
            {
                return cPFField;
            }

            set
            {
                if (cPFField is null || cPFField.Equals(value) != true)
                {
                    cPFField = value;
                    OnPropertyChanged("CPF");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(rodoMoto));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}