// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>NFe.Services.RecepcaoEvento</NameSpace><Collection>List</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
// '  <implementation>
// '    Implemented by Eficaz Sistemas de Gestão e Inteligência Tributária Ltda.
// '
// '    Daniel Lucindo Basílio
// '    Frankson Malta
// '    Henrique Clausing Cunha
// '
// '    Proibida a cópia, modificação, reflection e recompilação por terceiros.
// '  </implementation>
// ' ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.Serialization;
using EficazFramework.SPED.Utilities.XML;
using Microsoft.VisualBasic.CompilerServices;

namespace EficazFramework.SPED.Schemas.NFe
{

    // /// MAPEAMENTO

    // rááá.. hehehe tirei o "T" e acertei o "EnvEvento" para "envEvento"... não caio nessa de novo.
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "envEvento", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class PedidoEnvioEvento : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public PedidoEnvioEvento() : base()
        {
            eventoField = new List<Evento>();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string idLoteField;
        private List<Evento> eventoField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// ATENÇÃO:
        /// Identificador de controle do Lote de Envio do Evento.
        /// Número sequencial autoincremental único para identificação do Lote. A responsabilidade de gerar e controlar o
        /// identificador é exclusiva do autor do evento. O Web Service não faz qualquer uso ou controle deste identificador.
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement("idLote")]
        public string Lote
        {
            get
            {
                return idLoteField;
            }

            set
            {
                if (idLoteField is null || idLoteField.Equals(value) != true)
                {
                    idLoteField = value;
                    OnPropertyChanged("Lote");
                }
            }
        }

        /// <summary>
        /// Máximo de eventos suportados por Lote: 20;
        /// Cada evento deve ser assinado digitalmente na tag 'infEvento'.
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement("evento")]
        public List<Evento> Eventos
        {
            get
            {
                return eventoField;
            }

            set
            {
                if (eventoField is null || eventoField.Equals(value) != true)
                {
                    eventoField = value;
                    OnPropertyChanged("Eventos");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public string Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField is null || versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(PedidoEnvioEvento));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref PedidoEnvioEvento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref PedidoEnvioEvento obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static PedidoEnvioEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (PedidoEnvioEvento)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PedidoEnvioEvento Deserialize(System.IO.Stream s)
        {
            return (PedidoEnvioEvento)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref PedidoEnvioEvento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref PedidoEnvioEvento obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static PedidoEnvioEvento LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<PedidoEnvioEvento> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "evento", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class Evento : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public Evento() : base()
        {
            signatureField = new SignatureType();
            infEventoField = new InformacaoEvento();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private InformacaoEvento infEventoField;
        private SignatureType signatureField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("infEvento")]
        public InformacaoEvento InformacaoEvento
        {
            get
            {
                return infEventoField;
            }

            set
            {
                if (infEventoField is null || infEventoField.Equals(value) != true)
                {
                    infEventoField = value;
                    OnPropertyChanged("InformacaoEvento");
                }
            }
        }

        // ''' <summary>
        // ''' Assinatura digital do documento XML. Deve ser aplicada no elemento infEvento.
        // ''' </summary>
        // ''' <value></value>
        // ''' <returns></returns>
        // ''' <remarks></remarks>
        // <System.Xml.Serialization.XmlElementAttribute([Namespace]:="http://www.w3.org/2000/09/xmldsig#")> _
        // Public Property Signature() As SignatureType
        // Get
        // Return Me.signatureField
        // End Get
        // Set(value As SignatureType)
        // 'If ((Me.signatureField Is Nothing) _
        // '            OrElse (signatureField.Equals(value) <> True)) Then
        // Me.signatureField = value
        // 'Me.OnPropertyChanged("Signature")
        // 'End If
        // End Set
        // End Property

        [XmlAttribute(AttributeName = "versao")]
        public string Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField is null || versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                    InformacaoEvento.EventoVersao = value;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(Evento));
                }

                return sSerializer;
            }
        }


        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                str = str.Replace(" xmlns:xsi=" + '"' + "http://www.w3.org/2001/XMLSchema-instance" + '"' + " xmlns:xsd=" + '"' + "http://www.w3.org/2001/XMLSchema" + '"', string.Empty);
                var doc = XDocument.Parse(str);
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref Evento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref Evento obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static Evento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (Evento)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Evento Deserialize(System.IO.Stream s)
        {
            return (Evento)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref Evento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref Evento obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static Evento LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<Evento> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "TEventoInfEvento", AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class InformacaoEvento : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public InformacaoEvento() : base()
        {
            detEventoField = new DetalheEvento();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private OrgaoIBGE cOrgaoField;
        private Ambiente tpAmbField;
        private string itemField;
        private PersonalidadeJuridica itemElementNameField;
        private string chNFeField;
        private DateTime? dhEventoField;
        private CodigoEvento tpEventoField;
        private string nSeqEventoField;
        private string verEventoField;
        private DetalheEvento detEventoField;
        private string idField;
        private static XmlSerializer sSerializer;
        private string _datastring;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("cOrgao")]
        public OrgaoIBGE Orgao
        {
            get
            {
                return cOrgaoField;
            }

            set
            {
                if (cOrgaoField.Equals(value) != true)
                {
                    cOrgaoField = value;
                    OnPropertyChanged("Orgao");
                }
            }
        }

        [XmlElement("tpAmb")]
        public Ambiente Ambiente
        {
            get
            {
                return tpAmbField;
            }

            set
            {
                if (tpAmbField.Equals(value) != true)
                {
                    tpAmbField = value;
                    OnPropertyChanged("Ambiente");
                }
            }
        }

        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlChoiceIdentifier("PersonalidadeJuridica")]
        public string CNPJ_CPF
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("CNPJ_CPF");
                }
            }
        }

        [XmlIgnore()]
        public PersonalidadeJuridica PersonalidadeJuridica
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("PersonalidadeJuridica");
                }
            }
        }

        [XmlElement("chNFe")]
        public string ChaveNFe
        {
            get
            {
                return chNFeField;
            }

            set
            {
                if (chNFeField is null || chNFeField.Equals(value) != true)
                {
                    chNFeField = value;
                    OnPropertyChanged("ChaveNFe");
                    Regenerate_ID();
                }
            }
        }

        [XmlIgnore]
        public DateTime? EventoData
        {
            get
            {
                return dhEventoField;
            }

            set
            {
                if (dhEventoField is null || dhEventoField.Equals(value) != true)
                {
                    dhEventoField = value;
                    OnPropertyChanged("EventoData");
                }
            }
        }

        [XmlElement("dhEvento")]
        public string EventoDataString
        {
            get
            {
                if (EventoData.HasValue == true)
                {
                    return EventoData.Value.ToString("yyyy-MM-ddTHH:mm:sszzz");
                }
                else
                {
                    return DateTime.Now.ToString("AAAA-MM-DDThh:mm:ssTZD");
                }
            }

            set
            {
                _datastring = value;
                EventoData = Conversions.ToDate(value);
            }
        }

        [XmlElement("tpEvento")]
        public CodigoEvento EventoCodigo
        {
            get
            {
                return tpEventoField;
            }

            set
            {
                if (tpEventoField.Equals(value) != true)
                {
                    tpEventoField = value;
                    OnPropertyChanged("EventoCodigo");
                    switch (value)
                    {
                        case CodigoEvento.Confirmacao:
                            {
                                EventoDetalhes.EventoDescricao = "Confirmacao da Operacao";
                                break;
                            }

                        case CodigoEvento.NaoRealizada:
                            {
                                EventoDetalhes.EventoDescricao = "Operacao nao Realizada";
                                break;
                            }

                        case CodigoEvento.Desconhecimento:
                            {
                                EventoDetalhes.EventoDescricao = "Desconhecimento da Operacao";
                                break;
                            }

                        case CodigoEvento.Ciencia:
                            {
                                EventoDetalhes.EventoDescricao = "Ciencia da Operacao";
                                break;
                            }
                    }

                    Regenerate_ID();
                }
            }
        }

        /// <summary>
        /// Sequencial do evento. INFORMAR 1.
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement("nSeqEvento")]
        public string EventoNumeroSequencial
        {
            get
            {
                return nSeqEventoField;
            }

            set
            {
                if (nSeqEventoField is null || nSeqEventoField.Equals(value) != true)
                {
                    nSeqEventoField = value;
                    OnPropertyChanged("EventoNumeroSequencial");
                    Regenerate_ID();
                }
            }
        }

        [XmlElement("verEvento")]
        public string EventoVersao
        {
            get
            {
                return verEventoField;
            }

            set
            {
                if (verEventoField is null || verEventoField.Equals(value) != true)
                {
                    verEventoField = value;
                    OnPropertyChanged("EventoVersao");
                }
            }
        }

        [XmlElement("detEvento")]
        public DetalheEvento EventoDetalhes
        {
            get
            {
                return detEventoField;
            }

            set
            {
                if (detEventoField is null || detEventoField.Equals(value) != true)
                {
                    detEventoField = value;
                    OnPropertyChanged("EventoDetalhes");
                }
            }
        }

        /// <summary>
        /// Identificador da TAG a ser assinada.
        /// A regra de formação do ID é:
        /// "ID" + tpEvento + chave da NFe + nSeqEvento.
        /// É gerado automaticamente.
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(InformacaoEvento));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public void Regenerate_ID()
        {
            var buider = new System.Text.StringBuilder();
            buider.Append("ID");
            buider.Append((int)EventoCodigo);
            if (!string.IsNullOrEmpty(ChaveNFe) | string.IsNullOrWhiteSpace(ChaveNFe))
            {
                buider.Append(ChaveNFe);
            }
            // If Not String.IsNullOrEmpty(Me.EventoNumeroSequencial) Or String.IsNullOrWhiteSpace(Me.EventoNumeroSequencial) Then
            // If Me.EventoNumeroSequencial.Length = 2 Then
            // buider.Append(Me.EventoNumeroSequencial)
            // Else
            // buider.Append("0" & Me.EventoNumeroSequencial)
            // End If
            // Else
            buider.Append("01");
            // End If
            Id = buider.ToString();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "TEventoInfEventoDetEvento", AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class DetalheEvento : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string descEventoField;
        private string xJustField;
        private string xCorrecao;
        private VersaoServicoEvento versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("descEvento")]
        public string EventoDescricao
        {
            get
            {
                return descEventoField;
            }

            set
            {
                descEventoField = value;
                OnPropertyChanged("EventoDescricao");
            }
        }

        /// <summary>
        /// Utilizar este campo apenas quando o evento for "Operação não Realizada".
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement("xJust")]
        public string Justificativa
        {
            get
            {
                return xJustField;
            }

            set
            {
                if (xJustField is null || xJustField.Equals(value) != true)
                {
                    xJustField = value;
                    OnPropertyChanged("Justificativa");
                }
            }
        }

        [XmlElement("xCorrecao")]
        public string Correcao
        {
            get
            {
                return xCorrecao;
            }

            set
            {
                if (xCorrecao is null || xCorrecao.Equals(value) != true)
                {
                    xCorrecao = value;
                    OnPropertyChanged("Correcao");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public VersaoServicoEvento Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(DetalheEvento));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    // # Retorno #

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "retEnvEvento", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class RetornoEnvioEvento : INotifyPropertyChanged, IXmlSpedDocument
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public RetornoEnvioEvento() : base()
        {
            retEventoField = new List<EventoRetorno>();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string idLoteField;
        private Ambiente tpAmbField;
        private string verAplicField;
        private OrgaoIBGE cOrgaoField;
        private string cStatField;
        private string xMotivoField;
        private List<EventoRetorno> retEventoField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("idLote")]
        public string Lote
        {
            get
            {
                return idLoteField;
            }

            set
            {
                if (idLoteField is null || idLoteField.Equals(value) != true)
                {
                    idLoteField = value;
                    OnPropertyChanged("Lote");
                }
            }
        }

        [XmlElement("tpAmb")]
        public Ambiente Ambiente
        {
            get
            {
                return tpAmbField;
            }

            set
            {
                if (tpAmbField.Equals(value) != true)
                {
                    tpAmbField = value;
                    OnPropertyChanged("Ambiente");
                }
            }
        }

        [XmlElement("verAplic")]
        public string VersaoAplicativo
        {
            get
            {
                return verAplicField;
            }

            set
            {
                if (verAplicField is null || verAplicField.Equals(value) != true)
                {
                    verAplicField = value;
                    OnPropertyChanged("VersaoAplicativo");
                }
            }
        }

        [XmlElement("cOrgao")]
        public OrgaoIBGE Orgao
        {
            get
            {
                return cOrgaoField;
            }

            set
            {
                if (cOrgaoField.Equals(value) != true)
                {
                    cOrgaoField = value;
                    OnPropertyChanged("Orgao");
                }
            }
        }

        [XmlElement("cStat")]
        public string RespostaCodigo
        {
            get
            {
                return cStatField;
            }

            set
            {
                if (cStatField is null || cStatField.Equals(value) != true)
                {
                    cStatField = value;
                    OnPropertyChanged("RespostaCodigo");
                }
            }
        }

        [XmlElement("xMotivo")]
        public string RespostaDescricao
        {
            get
            {
                return xMotivoField;
            }

            set
            {
                if (xMotivoField is null || xMotivoField.Equals(value) != true)
                {
                    xMotivoField = value;
                    OnPropertyChanged("RespostaDescricao");
                }
            }
        }

        [XmlElement("retEvento")]
        public List<EventoRetorno> ResultadoEventos
        {
            get
            {
                return retEventoField;
            }

            set
            {
                if (retEventoField is null || retEventoField.Equals(value) != true)
                {
                    retEventoField = value;
                    OnPropertyChanged("ResultadoEventos");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public string Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField is null || versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(RetornoEnvioEvento));
                }

                return sSerializer;
            }
        }

        public XMLDocumentType DocumentType
        {
            get
            {
                return XMLDocumentType.NFeRetEvent;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                return ResultadoEventos.FirstOrDefault()?.InformacaoEventoRetorno.EventoDataRegistro;
            }
        }

        public string Chave
        {
            get
            {
                return ResultadoEventos.FirstOrDefault()?.InformacaoEventoRetorno.ChaveNFe;
            }
        }

        public override string ToString()
        {
            // Return MyBase.ToString()
            var b = new System.Text.StringBuilder();
            foreach (EventoRetorno ev in ResultadoEventos)
                b.AppendLine(ev.InformacaoEventoRetorno.ToString());
            return b.ToString();
        }
        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref RetornoEnvioEvento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref RetornoEnvioEvento obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static RetornoEnvioEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (RetornoEnvioEvento)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RetornoEnvioEvento Deserialize(System.IO.Stream s)
        {
            return (RetornoEnvioEvento)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoEnvioEvento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref RetornoEnvioEvento obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static RetornoEnvioEvento LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<RetornoEnvioEvento> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "retEvento", Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRoot(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true)]
    public partial class EventoRetorno : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public EventoRetorno() : base()
        {
            signatureField = new SignatureType();
            infEventoField = new InformacaoEventoRetorno();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private InformacaoEventoRetorno infEventoField;
        private SignatureType signatureField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("infEvento")]
        public InformacaoEventoRetorno InformacaoEventoRetorno
        {
            get
            {
                return infEventoField;
            }

            set
            {
                if (infEventoField is null || infEventoField.Equals(value) != true)
                {
                    infEventoField = value;
                    OnPropertyChanged("InformacaoEventoRetorno");
                }
            }
        }

        /// <summary>
        /// Assinatura digital do documento XML. Deverá ser aplicada no elemento infEvento.
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public SignatureType Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        [XmlAttribute(AttributeName = "versao")]
        public string Versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                if (versaoField is null || versaoField.Equals(value) != true)
                {
                    versaoField = value;
                    OnPropertyChanged("Versao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(EventoRetorno));
                }

                return sSerializer;
            }
        }

        public override string ToString()
        {
            // Return MyBase.ToString()
            return InformacaoEventoRetorno.ToString();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TEnvEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Semelhante À Function Serialize, porém já retorna o resultado
        /// em uma instância de XmlDocument, agilizando o processo de assinatura
        /// digital dos eventos.
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public virtual XDocument SerializeToXMLDocument()
        {
            string str = Serialize();
            if (!string.IsNullOrEmpty(str) | string.IsNullOrWhiteSpace(str))
            {
                var doc = XDocument.Load(Serialize());
                // doc.LoadXml(Me.Serialize)
                return doc;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnvEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref EventoRetorno obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref EventoRetorno obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static EventoRetorno Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return (EventoRetorno)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EventoRetorno Deserialize(System.IO.Stream s)
        {
            return (EventoRetorno)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveTo(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TEnvEvento object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TEnvEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref EventoRetorno obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref EventoRetorno obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static EventoRetorno LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            // Dim file As System.IO.FileStream = Nothing
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<EventoRetorno> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(TypeName = "TretEventoInfEvento", AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class InformacaoEventoRetorno : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private Ambiente tpAmbField;
        private string verAplicField;
        private OrgaoIBGE cOrgaoField;
        private string cStatField;
        private string xMotivoField;
        private string chNFeField;
        private CodigoEvento tpEventoField;
        //private string xEventoField;
        private string nSeqEventoField;
        //private string itemField;
        //private PersonalidadeJuridica itemElementNameField;
        //private string emailDestField;
        private DateTime? dhRegEventoField;
        private string nProtField;
        private string idField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("tpAmb")]
        public Ambiente Ambiente
        {
            get
            {
                return tpAmbField;
            }

            set
            {
                if (tpAmbField.Equals(value) != true)
                {
                    tpAmbField = value;
                    OnPropertyChanged("Ambiente");
                }
            }
        }

        [XmlElement("verAplic")]
        public string VersaoAplicativo
        {
            get
            {
                return verAplicField;
            }

            set
            {
                if (verAplicField is null || verAplicField.Equals(value) != true)
                {
                    verAplicField = value;
                    OnPropertyChanged("VersaoAplicativo");
                }
            }
        }

        [XmlElement("cOrgao")]
        public OrgaoIBGE Orgao
        {
            get
            {
                return cOrgaoField;
            }

            set
            {
                if (cOrgaoField.Equals(value) != true)
                {
                    cOrgaoField = value;
                    OnPropertyChanged("Orgao");
                }
            }
        }

        [XmlElement("cStat")]
        public string RespostaCodigo
        {
            get
            {
                return cStatField;
            }

            set
            {
                if (cStatField is null || cStatField.Equals(value) != true)
                {
                    cStatField = value;
                    OnPropertyChanged("RespostaCodigo");
                }
            }
        }

        [XmlElement("xMotivo")]
        public string RespostaDescricao
        {
            get
            {
                return xMotivoField;
            }

            set
            {
                if (xMotivoField is null || xMotivoField.Equals(value) != true)
                {
                    xMotivoField = value;
                    OnPropertyChanged("RespostaDescricao");
                }
            }
        }

        [XmlElement("chNFe")]
        public string ChaveNFe
        {
            get
            {
                return chNFeField;
            }

            set
            {
                if (chNFeField is null || chNFeField.Equals(value) != true)
                {
                    chNFeField = value;
                    OnPropertyChanged("ChaveNFe");
                }
            }
        }

        [XmlElement("tpEvento")]
        public CodigoEvento EventoCodigo
        {
            get
            {
                return tpEventoField;
            }

            set
            {
                if (tpEventoField != default(int) || tpEventoField.Equals(value) != true)
                {
                    tpEventoField = value;
                    OnPropertyChanged("EventoCodigo");
                }
            }
        }

        // <XmlElement("xEvento")>
        // Public Property EventoResultado() As String
        // Get
        // Return Me.xEventoField
        // End Get
        // Set(value As String)
        // If ((Me.xEventoField Is Nothing) _
        // OrElse (xEventoField.Equals(value) <> True)) Then
        // Me.xEventoField = value
        // Me.OnPropertyChanged("EventoResultado")
        // End If
        // End Set
        // End Property

        [XmlElement("nSeqEvento")]
        public string EventoNumeroSequencial
        {
            get
            {
                return nSeqEventoField;
            }

            set
            {
                if (nSeqEventoField is null || nSeqEventoField.Equals(value) != true)
                {
                    nSeqEventoField = value;
                    OnPropertyChanged("EventoNumeroSequencial");
                }
            }
        }

        // <System.Xml.Serialization.XmlElementAttribute("CNPJDest", GetType(String)), _
        // System.Xml.Serialization.XmlElementAttribute("CPFDest", GetType(String)), _
        // System.Xml.Serialization.XmlChoiceIdentifierAttribute("DestinatarioPersonalidadeJuridica")> _
        // Public Property DestinatarioCNPJ_CPF() As String
        // Get
        // Return Me.itemField
        // End Get
        // Set(value As String)
        // If ((Me.itemField Is Nothing) _
        // OrElse (itemField.Equals(value) <> True)) Then
        // Me.itemField = value
        // Me.OnPropertyChanged("Item")
        // End If
        // End Set
        // End Property

        // <System.Xml.Serialization.XmlIgnoreAttribute()> _
        // Public Property DestinatarioPersonalidadeJuridica() As PersonalidadeJuridica
        // Get
        // Return Me.itemElementNameField
        // End Get
        // Set(value As PersonalidadeJuridica)
        // If (itemElementNameField.Equals(value) <> True) Then
        // Me.itemElementNameField = value
        // Me.OnPropertyChanged("DestinatarioPersonalidadeJuridica")
        // End If
        // End Set
        // End Property

        // <XmlElement("emailDest")>
        // Public Property DestinatarioEmail() As String
        // Get
        // Return Me.emailDestField
        // End Get
        // Set(value As String)
        // If ((Me.emailDestField Is Nothing) _
        // OrElse (emailDestField.Equals(value) <> True)) Then
        // Me.emailDestField = value
        // Me.OnPropertyChanged("DestinatarioEmail")
        // End If
        // End Set
        // End Property

        [XmlIgnore()]
        public DateTime? EventoDataRegistro
        {
            get
            {
                return dhRegEventoField;
            }

            set
            {
                if (dhRegEventoField is null || dhRegEventoField.Equals(value) != true)
                {
                    dhRegEventoField = value;
                    OnPropertyChanged("EventoDataRegistro");
                }
            }
        }

        [XmlElement("dhRegEvento")]
        public string EventoDataRegistro_XML
        {
            get
            {
                return Conversions.ToString(dhRegEventoField);
            }

            set
            {
                var result = default(DateTime);
                if (dhRegEventoField is null || DateTime.TryParse(value, out result) || dhRegEventoField.Equals(value) != true)
                {
                    dhRegEventoField = result;
                    OnPropertyChanged("EventoDataRegistro_XML");
                    OnPropertyChanged("EventoDataRegistro");
                }
            }
        }

        [XmlElement("nProt")]
        public string Protocolo
        {
            get
            {
                return nProtField;
            }

            set
            {
                if (nProtField is null || nProtField.Equals(value) != true)
                {
                    nProtField = value;
                    OnPropertyChanged("Protocolo");
                }
            }
        }

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(InformacaoEventoRetorno));
                }

                return sSerializer;
            }
        }

        public override string ToString()
        {
            // Return MyBase.ToString()
            var b = new System.Text.StringBuilder();
            b.AppendLine("NF-e: " + ChaveNFe);
            b.Append("Resultado: ");
            b.Append(RespostaCodigo);
            b.Append(" - ");
            b.Append(RespostaDescricao);
            return b.ToString();
        }
        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public void Regenerate_ID()
        {
            var buider = new System.Text.StringBuilder();
            buider.Append("ID");
            buider.Append((int)EventoCodigo);
            if (!string.IsNullOrEmpty(ChaveNFe) | string.IsNullOrWhiteSpace(ChaveNFe))
            {
                buider.Append(ChaveNFe);
            }
            // If Not String.IsNullOrEmpty(Me.EventoNumeroSequencial) Or String.IsNullOrWhiteSpace(Me.EventoNumeroSequencial) Then
            // If Me.EventoNumeroSequencial.Length = 2 Then
            // buider.Append(Me.EventoNumeroSequencial)
            // Else
            // buider.Append("0" & Me.EventoNumeroSequencial)
            // End If
            // Else
            buider.Append("01");
            // End If
            Id = buider.ToString();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }
}