// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>NFSe.Classes.GINFES</NameSpace><Collection>List</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Xml.Serialization;
using EficazFramework.SPED.Extensions;
using EficazFramework.SPED.Utilities.XML;
using Microsoft.VisualBasic.CompilerServices;

namespace EficazFramework.SPED.Schemas.NFSe.Common
{

    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot("CompNfse", IsNullable = false)]
    public partial class tcCompNfse : INotifyPropertyChanged, IXmlSpedDocument
    {
        private NFSe nfseField;
        private tcCancelamentoNfse nfseCancelamentoField;
        private tcSubstituicaoNfse nfseSubstituicaoField;
        private static XmlSerializer sSerializer;

        public tcCompNfse() : base()
        {
            // Me.nfseSubstituicaoField = New tcSubstituicaoNfse()
            // Me.nfseCancelamentoField = New tcCancelamentoNfse()
            // Me.nfseField = New NFSe()
        }

        [XmlElement("Nfse")]
        public virtual NFSe Nfse
        {
            get
            {
                return nfseField;
            }

            set
            {
                if (nfseField is null || nfseField.Equals(value) != true)
                {
                    nfseField = value;
                    OnPropertyChanged("Nfse");
                }
            }
        }

        public tcCancelamentoNfse NfseCancelamento
        {
            get
            {
                return nfseCancelamentoField;
            }

            set
            {
                if (nfseCancelamentoField is null || nfseCancelamentoField.Equals(value) != true)
                {
                    nfseCancelamentoField = value;
                    OnPropertyChanged("NfseCancelamento");
                }
            }
        }

        public tcSubstituicaoNfse NfseSubstituicao
        {
            get
            {
                return nfseSubstituicaoField;
            }

            set
            {
                if (nfseSubstituicaoField is null || nfseSubstituicaoField.Equals(value) != true)
                {
                    nfseSubstituicaoField = value;
                    OnPropertyChanged("NfseSubstituicao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcCompNfse));
                }

                return sSerializer;
            }
        }

        public XmlDocumentType DocumentType
        {
            get
            {
                return XmlDocumentType.NFSe_CommonSchema;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                if (Nfse is null)
                    return default;
                if (Nfse.InfNfse is null)
                    return default;
                return Nfse.InfNfse.DataEmissao;
            }
        }

        public string Chave
        {
            get
            {
                return Nfse.InfNfse.CodigoVerificacao;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcCompNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcCompNfse obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcCompNfse Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                string result = Operations.RemoveAllNamespaces(xml); // xml.Replace("ns1:", String.Empty).Replace("ns2:", String.Empty).Replace("ns3:", String.Empty).Replace("ns4:", String.Empty).Replace("ns5:", String.Empty).Replace(":ns1", String.Empty).Replace(":ns2", String.Empty).Replace(":ns3", String.Empty).Replace(":ns4", String.Empty).Replace(":ns5", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_cancelar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/tipos""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_consultar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.w3.org/2000/09/xmldsig#""", String.Empty)
                stringReader = new System.IO.StringReader(result);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcCompNfse)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcCompNfse)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcCompNfse Deserialize(System.IO.Stream s)
        {
            return (tcCompNfse)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcCompNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcCompNfse obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcCompNfse LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null & close_stream == true)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcCompNfse> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot("ComplNfse", IsNullable = false)]
    public partial class tcComplNfse : INotifyPropertyChanged, IXmlSpedDocument
    {
        private NFSe nfseField;
        private tcCancelamentoNfse nfseCancelamentoField;
        private tcSubstituicaoNfse nfseSubstituicaoField;
        private static XmlSerializer sSerializer;

        public tcComplNfse() : base()
        {
            // Me.nfseSubstituicaoField = New tcSubstituicaoNfse()
            // Me.nfseCancelamentoField = New tcCancelamentoNfse()
            // Me.nfseField = New NFSe()
        }

        [XmlElement("Nfse")]
        public virtual NFSe Nfse
        {
            get
            {
                return nfseField;
            }

            set
            {
                if (nfseField is null || nfseField.Equals(value) != true)
                {
                    nfseField = value;
                    OnPropertyChanged("Nfse");
                }
            }
        }

        public tcCancelamentoNfse NfseCancelamento
        {
            get
            {
                return nfseCancelamentoField;
            }

            set
            {
                if (nfseCancelamentoField is null || nfseCancelamentoField.Equals(value) != true)
                {
                    nfseCancelamentoField = value;
                    OnPropertyChanged("NfseCancelamento");
                }
            }
        }

        public tcSubstituicaoNfse NfseSubstituicao
        {
            get
            {
                return nfseSubstituicaoField;
            }

            set
            {
                if (nfseSubstituicaoField is null || nfseSubstituicaoField.Equals(value) != true)
                {
                    nfseSubstituicaoField = value;
                    OnPropertyChanged("NfseSubstituicao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcComplNfse));
                }

                return sSerializer;
            }
        }

        public XmlDocumentType DocumentType
        {
            get
            {
                return XmlDocumentType.NFSe_CommonSchema;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                if (Nfse is null)
                    return default;
                if (Nfse.InfNfse is null)
                    return default;
                return Nfse.InfNfse.DataEmissao;
            }
        }

        public string Chave
        {
            get
            {
                return Nfse.InfNfse.CodigoVerificacao;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcComplNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcComplNfse obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcComplNfse Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                string result = Operations.RemoveAllNamespaces(xml); // xml.Replace("ns1:", String.Empty).Replace("ns2:", String.Empty).Replace("ns3:", String.Empty).Replace("ns4:", String.Empty).Replace("ns5:", String.Empty).Replace(":ns1", String.Empty).Replace(":ns2", String.Empty).Replace(":ns3", String.Empty).Replace(":ns4", String.Empty).Replace(":ns5", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_cancelar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/tipos""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_consultar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.w3.org/2000/09/xmldsig#""", String.Empty)
                stringReader = new System.IO.StringReader(result);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcComplNfse)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcComplNfse)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcComplNfse Deserialize(System.IO.Stream s)
        {
            return (tcComplNfse)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcComplNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcComplNfse obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcComplNfse LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null & close_stream == true)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcComplNfse> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot("Nfse", IsNullable = false)]
    public partial class NFSe : INotifyPropertyChanged, IXmlSpedDocument
    {
        private tcInfNfse infNfseField;
        private List<SignatureType> signatureField;
        private static XmlSerializer sSerializer;

        public NFSe() : base()
        {
            signatureField = new List<SignatureType>();
            infNfseField = new tcInfNfse();
        }

        [XmlElement("InfNfse")]
        public tcInfNfse InfNfse
        {
            get
            {
                return infNfseField;
            }

            set
            {
                if (infNfseField is null || infNfseField.Equals(value) != true)
                {
                    infNfseField = value;
                    OnPropertyChanged("InfNfse");
                }
            }
        }

        [XmlElement("Signature", Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public List<SignatureType> Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(NFSe));
                }

                return sSerializer;
            }
        }

        public XmlDocumentType DocumentType
        {
            get
            {
                return XmlDocumentType.NFSe_CommonSchema_SingleNFse;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                return InfNfse.DataEmissao;
            }
        }

        public string Chave
        {
            get
            {
                return InfNfse.CodigoVerificacao;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref NFSe obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref NFSe obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static NFSe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                string result = Operations.RemoveAllNamespaces(xml); // xml.Replace("ns1:", String.Empty).Replace("ns2:", String.Empty).Replace("ns3:", String.Empty).Replace("ns4:", String.Empty).Replace("ns5:", String.Empty).Replace(":ns1", String.Empty).Replace(":ns2", String.Empty).Replace(":ns3", String.Empty).Replace(":ns4", String.Empty).Replace(":ns5", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_cancelar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/tipos""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_consultar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.w3.org/2000/09/xmldsig#""", String.Empty)
                stringReader = new System.IO.StringReader(result);
                // stringReader.ReadToEnd() 'TESTING...
                return (NFSe)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), NFSe)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFSe Deserialize(System.IO.Stream s)
        {
            return (NFSe)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref NFSe obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref NFSe obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static NFSe LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<NFSe> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcRps : INotifyPropertyChanged
    {
        private tcInfRps infRpsField;
        private SignatureType signatureField;
        private static XmlSerializer sSerializer;

        public tcRps() : base()
        {
            signatureField = new SignatureType();
            infRpsField = new tcInfRps();
        }

        public tcInfRps InfRps
        {
            get
            {
                return infRpsField;
            }

            set
            {
                if (infRpsField is null || infRpsField.Equals(value) != true)
                {
                    infRpsField = value;
                    OnPropertyChanged("InfRps");
                }
            }
        }

        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public SignatureType Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcRps));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcRps obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcRps obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcRps Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcRps)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcRps)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcRps Deserialize(System.IO.Stream s)
        {
            return (tcRps)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcRps obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcRps obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcRps LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcRps> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcLoteRps : INotifyPropertyChanged
    {
        private string numeroLoteField;
        private string cnpjField;
        private string inscricaoMunicipalField;
        private int quantidadeRpsField;
        private List<tcRps> listaRpsField;
        private string idField;
        private static XmlSerializer sSerializer;

        public tcLoteRps() : base()
        {
            listaRpsField = new List<tcRps>();
        }

        [XmlElement(DataType = "nonNegativeInteger")]
        public string NumeroLote
        {
            get
            {
                return numeroLoteField;
            }

            set
            {
                if (numeroLoteField is null || numeroLoteField.Equals(value) != true)
                {
                    numeroLoteField = value;
                    OnPropertyChanged("NumeroLote");
                }
            }
        }

        public string Cnpj
        {
            get
            {
                return cnpjField;
            }

            set
            {
                if (cnpjField is null || cnpjField.Equals(value) != true)
                {
                    cnpjField = value;
                    OnPropertyChanged("Cnpj");
                }
            }
        }

        public string InscricaoMunicipal
        {
            get
            {
                return inscricaoMunicipalField;
            }

            set
            {
                if (inscricaoMunicipalField is null || inscricaoMunicipalField.Equals(value) != true)
                {
                    inscricaoMunicipalField = value;
                    OnPropertyChanged("InscricaoMunicipal");
                }
            }
        }

        public int QuantidadeRps
        {
            get
            {
                return quantidadeRpsField;
            }

            set
            {
                if (quantidadeRpsField.Equals(value) != true)
                {
                    quantidadeRpsField = value;
                    OnPropertyChanged("QuantidadeRps");
                }
            }
        }

        [XmlArrayItem("Rps", IsNullable = false)]
        public List<tcRps> ListaRps
        {
            get
            {
                return listaRpsField;
            }

            set
            {
                if (listaRpsField is null || listaRpsField.Equals(value) != true)
                {
                    listaRpsField = value;
                    OnPropertyChanged("ListaRps");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcLoteRps));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcLoteRps obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcLoteRps obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcLoteRps Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcLoteRps)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcLoteRps)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcLoteRps Deserialize(System.IO.Stream s)
        {
            return (tcLoteRps)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcLoteRps obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcLoteRps obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcLoteRps LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcLoteRps> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcPedidoCancelamento : INotifyPropertyChanged
    {
        private tcInfPedidoCancelamento infPedidoCancelamentoField;
        private SignatureType signatureField;
        private static XmlSerializer sSerializer;

        public tcPedidoCancelamento() : base()
        {
            signatureField = new SignatureType();
            infPedidoCancelamentoField = new tcInfPedidoCancelamento();
        }

        public tcInfPedidoCancelamento InfPedidoCancelamento
        {
            get
            {
                return infPedidoCancelamentoField;
            }

            set
            {
                if (infPedidoCancelamentoField is null || infPedidoCancelamentoField.Equals(value) != true)
                {
                    infPedidoCancelamentoField = value;
                    OnPropertyChanged("InfPedidoCancelamento");
                }
            }
        }

        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public SignatureType Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcPedidoCancelamento));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcPedidoCancelamento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcPedidoCancelamento obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcPedidoCancelamento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcPedidoCancelamento)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcPedidoCancelamento)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcPedidoCancelamento Deserialize(System.IO.Stream s)
        {
            return (tcPedidoCancelamento)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcPedidoCancelamento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcPedidoCancelamento obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcPedidoCancelamento LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcPedidoCancelamento> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot("NFSE", IsNullable = true)]
    public partial class tcInfPedidoCancelamento : INotifyPropertyChanged
    {
        private List<tcIdentificacaoNfse> identificacaoNfseField = new List<tcIdentificacaoNfse>();
        private string codigoCancelamentoField;
        private string idField;

        public tcInfPedidoCancelamento() : base()
        {
            identificacaoNfseField = new List<tcIdentificacaoNfse>();
        }

        public List<tcIdentificacaoNfse> IdentificacaoNfse
        {
            get
            {
                return identificacaoNfseField;
            }

            set
            {
                if (identificacaoNfseField is null || identificacaoNfseField.Equals(value) != true)
                {
                    identificacaoNfseField = value;
                    OnPropertyChanged("IdentificacaoNfse");
                }
            }
        }

        public string CodigoCancelamento
        {
            get
            {
                return codigoCancelamentoField;
            }

            set
            {
                if (codigoCancelamentoField is null || codigoCancelamentoField.Equals(value) != true)
                {
                    codigoCancelamentoField = value;
                    OnPropertyChanged("CodigoCancelamento");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcInfConfirmacaoCancelamento : INotifyPropertyChanged
    {
        private bool sucessoField;
        private DateTime dataHoraField;

        public bool Sucesso
        {
            get
            {
                return sucessoField;
            }

            set
            {
                if (sucessoField.Equals(value) != true)
                {
                    sucessoField = value;
                    OnPropertyChanged("Sucesso");
                }
            }
        }

        public DateTime DataHora
        {
            get
            {
                return dataHoraField;
            }

            set
            {
                if (dataHoraField.Equals(value) != true)
                {
                    dataHoraField = value;
                    OnPropertyChanged("DataHora");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcConfirmacaoCancelamento : INotifyPropertyChanged
    {
        private tcPedidoCancelamento pedidoField;
        private tcInfConfirmacaoCancelamento infConfirmacaoCancelamentoField;
        private string idField;
        private static XmlSerializer sSerializer;

        public tcConfirmacaoCancelamento() : base()
        {
            infConfirmacaoCancelamentoField = new tcInfConfirmacaoCancelamento();
            pedidoField = new tcPedidoCancelamento();
        }

        public tcPedidoCancelamento Pedido
        {
            get
            {
                return pedidoField;
            }

            set
            {
                if (pedidoField is null || pedidoField.Equals(value) != true)
                {
                    pedidoField = value;
                    OnPropertyChanged("Pedido");
                }
            }
        }

        public tcInfConfirmacaoCancelamento InfConfirmacaoCancelamento
        {
            get
            {
                return infConfirmacaoCancelamentoField;
            }

            set
            {
                if (infConfirmacaoCancelamentoField is null || infConfirmacaoCancelamentoField.Equals(value) != true)
                {
                    infConfirmacaoCancelamentoField = value;
                    OnPropertyChanged("InfConfirmacaoCancelamento");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcConfirmacaoCancelamento));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcConfirmacaoCancelamento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcConfirmacaoCancelamento obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcConfirmacaoCancelamento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcConfirmacaoCancelamento)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcConfirmacaoCancelamento)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcConfirmacaoCancelamento Deserialize(System.IO.Stream s)
        {
            return (tcConfirmacaoCancelamento)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcConfirmacaoCancelamento obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcConfirmacaoCancelamento obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcConfirmacaoCancelamento LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcConfirmacaoCancelamento> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcCancelamentoNfse : INotifyPropertyChanged
    {
        private tcConfirmacaoCancelamento confirmacaoField;
        private SignatureType signatureField;
        private static XmlSerializer sSerializer;

        public tcCancelamentoNfse() : base()
        {
            signatureField = new SignatureType();
            confirmacaoField = new tcConfirmacaoCancelamento();
        }

        public tcConfirmacaoCancelamento Confirmacao
        {
            get
            {
                return confirmacaoField;
            }

            set
            {
                if (confirmacaoField is null || confirmacaoField.Equals(value) != true)
                {
                    confirmacaoField = value;
                    OnPropertyChanged("Confirmacao");
                }
            }
        }

        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public SignatureType Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcCancelamentoNfse));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcCancelamentoNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcCancelamentoNfse obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcCancelamentoNfse Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcCancelamentoNfse)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcCancelamentoNfse)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcCancelamentoNfse Deserialize(System.IO.Stream s)
        {
            return (tcCancelamentoNfse)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcCancelamentoNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcCancelamentoNfse obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcCancelamentoNfse LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcCancelamentoNfse> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcSubstituicaoNfse : INotifyPropertyChanged
    {
        private tcInfSubstituicaoNfse substituicaoNfseField;
        private List<SignatureType> signatureField;
        private static XmlSerializer sSerializer;

        public tcSubstituicaoNfse() : base()
        {
            signatureField = new List<SignatureType>();
            substituicaoNfseField = new tcInfSubstituicaoNfse();
        }

        public tcInfSubstituicaoNfse SubstituicaoNfse
        {
            get
            {
                return substituicaoNfseField;
            }

            set
            {
                if (substituicaoNfseField is null || substituicaoNfseField.Equals(value) != true)
                {
                    substituicaoNfseField = value;
                    OnPropertyChanged("SubstituicaoNfse");
                }
            }
        }

        [XmlElement("Signature", Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public List<SignatureType> Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcSubstituicaoNfse));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcSubstituicaoNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcSubstituicaoNfse obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcSubstituicaoNfse Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcSubstituicaoNfse)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcSubstituicaoNfse)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcSubstituicaoNfse Deserialize(System.IO.Stream s)
        {
            return (tcSubstituicaoNfse)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcSubstituicaoNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcSubstituicaoNfse obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcSubstituicaoNfse LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcSubstituicaoNfse> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcInfSubstituicaoNfse : INotifyPropertyChanged
    {
        private string nfseSubstituidoraField;
        private string idField;

        [XmlElement(DataType = "nonNegativeInteger")]
        public string NfseSubstituidora
        {
            get
            {
                return nfseSubstituidoraField;
            }

            set
            {
                if (nfseSubstituidoraField is null || nfseSubstituidoraField.Equals(value) != true)
                {
                    nfseSubstituidoraField = value;
                    OnPropertyChanged("NfseSubstituidora");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [XmlType()]
    public enum PersonalidadeJuridica
    {

        /// <remarks/>
        [System.ComponentModel.Description("CNPJ")]
        [XmlEnum("Cnpj")]
        Cnpj,

        /// <remarks/>
        [System.ComponentModel.Description("CPF")]
        [XmlEnum("Cpf")]
        Cpf
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcCpfCnpj : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string itemField;
        private PersonalidadeJuridica itemElementNameField;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("Cnpj", typeof(string))]
        [XmlElement("Cpf", typeof(string))]
        [XmlChoiceIdentifier("ItemElementName")]
        public string Identificador
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("Item");
                }
            }
        }

        public string IdentificadorFormatado
        {
            get
            {
                return Identificador.FormatRFBDocument();
            }
        }

        [XmlIgnore()]
        public PersonalidadeJuridica ItemElementName
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("ItemElementName");
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcEndereco : INotifyPropertyChanged
    {
        private string enderecoField;
        private string numeroField;
        private string complementoField;
        private string bairroField;
        private int? codigoMunicipioField;
        private string ufField;
        private string cepField;

        public string Endereco
        {
            get
            {
                return enderecoField;
            }

            set
            {
                if (enderecoField is null || enderecoField.Equals(value) != true)
                {
                    enderecoField = value;
                    OnPropertyChanged("Endereco");
                }
            }
        }

        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string Complemento
        {
            get
            {
                return complementoField;
            }

            set
            {
                if (complementoField is null || complementoField.Equals(value) != true)
                {
                    complementoField = value;
                    OnPropertyChanged("Complemento");
                }
            }
        }

        public string Bairro
        {
            get
            {
                return bairroField;
            }

            set
            {
                if (bairroField is null || bairroField.Equals(value) != true)
                {
                    bairroField = value;
                    OnPropertyChanged("Bairro");
                }
            }
        }

        public int CodigoMunicipio
        {
            get
            {
                if (codigoMunicipioField.HasValue)
                {
                    return codigoMunicipioField.Value;
                }
                else
                {
                    return Conversions.ToInteger(default);
                }
            }

            set
            {
                if (codigoMunicipioField.Equals(value) != true)
                {
                    codigoMunicipioField = value;
                    OnPropertyChanged("CodigoMunicipio");
                }
            }
        }

        public int Cidade
        {
            get
            {
                if (codigoMunicipioField.HasValue)
                {
                    return codigoMunicipioField.Value;
                }
                else
                {
                    return Conversions.ToInteger(default);
                }
            }

            set
            {
                if (codigoMunicipioField.Equals(value) != true)
                {
                    codigoMunicipioField = value;
                    OnPropertyChanged("Cidade");
                }
            }
        }

        [XmlIgnore()]
        public bool CodigoMunicipioSpecified
        {
            get
            {
                return codigoMunicipioField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    codigoMunicipioField = default;
                }
            }
        }

        public string Uf
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField is null || ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("Uf");
                }
            }
        }

        public string Estado
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField is null || ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("Estado");
                }
            }
        }

        public string Cep
        {
            get
            {
                return cepField;
            }

            set
            {
                if (cepField is null || cepField.Equals(value) != true)
                {
                    cepField = value;
                    OnPropertyChanged("Cep");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcContato : INotifyPropertyChanged
    {
        private string telefoneField;
        private string emailField;

        public string Telefone
        {
            get
            {
                return telefoneField;
            }

            set
            {
                if (telefoneField is null || telefoneField.Equals(value) != true)
                {
                    telefoneField = value;
                    OnPropertyChanged("Telefone");
                }
            }
        }

        public string Email
        {
            get
            {
                return emailField;
            }

            set
            {
                if (emailField is null || emailField.Equals(value) != true)
                {
                    emailField = value;
                    OnPropertyChanged("Email");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoOrgaoGerador : INotifyPropertyChanged
    {
        private int codigoMunicipioField;
        private string ufField;

        public int CodigoMunicipio
        {
            get
            {
                return codigoMunicipioField;
            }

            set
            {
                if (codigoMunicipioField.Equals(value) != true)
                {
                    codigoMunicipioField = value;
                    OnPropertyChanged("CodigoMunicipio");
                }
            }
        }

        public string Uf
        {
            get
            {
                return ufField;
            }

            set
            {
                if (ufField is null || ufField.Equals(value) != true)
                {
                    ufField = value;
                    OnPropertyChanged("Uf");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoRps : INotifyPropertyChanged
    {
        private string numeroField;
        private string serieField;
        private int tipoField;

        [XmlElement(DataType = "nonNegativeInteger")]
        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string Serie
        {
            get
            {
                return serieField;
            }

            set
            {
                if (serieField is null || serieField.Equals(value) != true)
                {
                    serieField = value;
                    OnPropertyChanged("Serie");
                }
            }
        }

        public int Tipo
        {
            get
            {
                return tipoField;
            }

            set
            {
                if (tipoField == default || tipoField.Equals(value) != true)
                {
                    tipoField = value;
                    OnPropertyChanged("Tipo");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoPrestador : INotifyPropertyChanged
    {
        private string cnpjField;
        private tcCpfCnpj cpfCnpjField;
        private string inscricaoMunicipalField;

        public string Cnpj
        {
            get
            {
                return cnpjField;
            }

            set
            {
                if (cnpjField is null || cnpjField.Equals(value) != true)
                {
                    cnpjField = value;
                    OnPropertyChanged("Cnpj");
                }
            }
        }

        public tcCpfCnpj CpfCnpj
        {
            get
            {
                return cpfCnpjField;
            }

            set
            {
                if (cpfCnpjField is null || cpfCnpjField.Equals(value) != true)
                {
                    cpfCnpjField = value;
                    OnPropertyChanged("CpfCnpj");
                }
            }
        }

        public string InscricaoMunicipal
        {
            get
            {
                return inscricaoMunicipalField;
            }

            set
            {
                if (inscricaoMunicipalField is null || inscricaoMunicipalField.Equals(value) != true)
                {
                    inscricaoMunicipalField = value;
                    OnPropertyChanged("InscricaoMunicipal");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoTomador : INotifyPropertyChanged
    {
        private tcCpfCnpj cpfCnpjField;
        private string inscricaoMunicipalField;

        public tcIdentificacaoTomador() : base()
        {
            cpfCnpjField = new tcCpfCnpj();
        }

        public tcCpfCnpj CpfCnpj
        {
            get
            {
                return cpfCnpjField;
            }

            set
            {
                if (cpfCnpjField is null || cpfCnpjField.Equals(value) != true)
                {
                    cpfCnpjField = value;
                    OnPropertyChanged("CpfCnpj");
                }
            }
        }

        public string InscricaoMunicipal
        {
            get
            {
                return inscricaoMunicipalField;
            }

            set
            {
                if (inscricaoMunicipalField is null || inscricaoMunicipalField.Equals(value) != true)
                {
                    inscricaoMunicipalField = value;
                    OnPropertyChanged("InscricaoMunicipal");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcDadosTomador : INotifyPropertyChanged
    {
        private tcIdentificacaoTomador identificacaoTomadorField;
        private string razaoSocialField;
        private tcEndereco enderecoField;
        private tcContato contatoField;

        public tcDadosTomador() : base()
        {
            contatoField = new tcContato();
            enderecoField = new tcEndereco();
            identificacaoTomadorField = new tcIdentificacaoTomador();
        }

        public tcIdentificacaoTomador IdentificacaoTomador
        {
            get
            {
                return identificacaoTomadorField;
            }

            set
            {
                if (identificacaoTomadorField is null || identificacaoTomadorField.Equals(value) != true)
                {
                    identificacaoTomadorField = value;
                    OnPropertyChanged("IdentificacaoTomador");
                }
            }
        }

        public string RazaoSocial
        {
            get
            {
                return razaoSocialField;
            }

            set
            {
                if (razaoSocialField is null || razaoSocialField.Equals(value) != true)
                {
                    razaoSocialField = value;
                    OnPropertyChanged("RazaoSocial");
                }
            }
        }

        public tcEndereco Endereco
        {
            get
            {
                return enderecoField;
            }

            set
            {
                if (enderecoField is null || enderecoField.Equals(value) != true)
                {
                    enderecoField = value;
                    OnPropertyChanged("Endereco");
                }
            }
        }

        public tcContato Contato
        {
            get
            {
                return contatoField;
            }

            set
            {
                if (contatoField is null || contatoField.Equals(value) != true)
                {
                    contatoField = value;
                    OnPropertyChanged("Contato");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoIntermediarioServico : INotifyPropertyChanged
    {
        private string razaoSocialField;
        private tcCpfCnpj cpfCnpjField;
        private string inscricaoMunicipalField;

        public tcIdentificacaoIntermediarioServico() : base()
        {
            cpfCnpjField = new tcCpfCnpj();
        }

        public string RazaoSocial
        {
            get
            {
                return razaoSocialField;
            }

            set
            {
                if (razaoSocialField is null || razaoSocialField.Equals(value) != true)
                {
                    razaoSocialField = value;
                    OnPropertyChanged("RazaoSocial");
                }
            }
        }

        public tcCpfCnpj CpfCnpj
        {
            get
            {
                return cpfCnpjField;
            }

            set
            {
                if (cpfCnpjField is null || cpfCnpjField.Equals(value) != true)
                {
                    cpfCnpjField = value;
                    OnPropertyChanged("CpfCnpj");
                }
            }
        }

        public string InscricaoMunicipal
        {
            get
            {
                return inscricaoMunicipalField;
            }

            set
            {
                if (inscricaoMunicipalField is null || inscricaoMunicipalField.Equals(value) != true)
                {
                    inscricaoMunicipalField = value;
                    OnPropertyChanged("InscricaoMunicipal");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcValores : INotifyPropertyChanged
    {
        private decimal valorServicosField;
        private decimal? valorDeducoesField;
        private decimal? valorPisField;
        private decimal? valorCofinsField;
        private decimal? valorInssField;
        private decimal? valorIrField;
        private decimal? valorCsllField;
        private int issRetidoField;
        private decimal? valorIssField;
        private decimal? valorIssRetidoField;
        private decimal? outrasRetencoesField;
        private decimal? baseCalculoField;
        private decimal? aliquotaField;
        private decimal? valorLiquidoNfseField;
        private decimal? descontoIncondicionadoField;
        private decimal? descontoCondicionadoField;

        public decimal ValorServicos
        {
            get
            {
                return valorServicosField;
            }

            set
            {
                if (valorServicosField.Equals(value) != true)
                {
                    valorServicosField = value;
                    OnPropertyChanged("ValorServicos");
                }
            }
        }

        public decimal ValorDeducoes
        {
            get
            {
                if (valorDeducoesField.HasValue)
                {
                    return valorDeducoesField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorDeducoesField.Equals(value) != true)
                {
                    valorDeducoesField = value;
                    OnPropertyChanged("ValorDeducoes");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorDeducoesSpecified
        {
            get
            {
                return valorDeducoesField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorDeducoesField = default;
                }
            }
        }

        public decimal ValorPis
        {
            get
            {
                if (valorPisField.HasValue)
                {
                    return valorPisField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorPisField.Equals(value) != true)
                {
                    valorPisField = value;
                    OnPropertyChanged("ValorPis");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorPisSpecified
        {
            get
            {
                return valorPisField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorPisField = default;
                }
            }
        }

        public decimal ValorCofins
        {
            get
            {
                if (valorCofinsField.HasValue)
                {
                    return valorCofinsField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorCofinsField.Equals(value) != true)
                {
                    valorCofinsField = value;
                    OnPropertyChanged("ValorCofins");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorCofinsSpecified
        {
            get
            {
                return valorCofinsField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorCofinsField = default;
                }
            }
        }

        public decimal ValorInss
        {
            get
            {
                if (valorInssField.HasValue)
                {
                    return valorInssField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorInssField.Equals(value) != true)
                {
                    valorInssField = value;
                    OnPropertyChanged("ValorInss");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorInssSpecified
        {
            get
            {
                return valorInssField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorInssField = default;
                }
            }
        }

        public decimal ValorIr
        {
            get
            {
                if (valorIrField.HasValue)
                {
                    return valorIrField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorIrField.Equals(value) != true)
                {
                    valorIrField = value;
                    OnPropertyChanged("ValorIr");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorIrSpecified
        {
            get
            {
                return valorIrField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorIrField = default;
                }
            }
        }

        public decimal ValorCsll
        {
            get
            {
                if (valorCsllField.HasValue)
                {
                    return valorCsllField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorCsllField.Equals(value) != true)
                {
                    valorCsllField = value;
                    OnPropertyChanged("ValorCsll");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorCsllSpecified
        {
            get
            {
                return valorCsllField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorCsllField = default;
                }
            }
        }

        public int IssRetido
        {
            get
            {
                return issRetidoField;
            }

            set
            {
                if (issRetidoField == default || issRetidoField.Equals(value) != true)
                {
                    issRetidoField = value;
                    OnPropertyChanged("IssRetido");
                }
            }
        }

        public decimal ValorIss
        {
            get
            {
                if (valorIssField.HasValue)
                {
                    return valorIssField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorIssField.Equals(value) != true)
                {
                    valorIssField = value;
                    OnPropertyChanged("ValorIss");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorIssSpecified
        {
            get
            {
                return valorIssField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorIssField = default;
                }
            }
        }

        public decimal ValorIssRetido
        {
            get
            {
                if (valorIssRetidoField.HasValue)
                {
                    return valorIssRetidoField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorIssRetidoField.Equals(value) != true)
                {
                    valorIssRetidoField = value;
                    OnPropertyChanged("ValorIssRetido");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorIssRetidoSpecified
        {
            get
            {
                return valorIssRetidoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorIssRetidoField = default;
                }
            }
        }

        public decimal OutrasRetencoes
        {
            get
            {
                if (outrasRetencoesField.HasValue)
                {
                    return outrasRetencoesField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (outrasRetencoesField.Equals(value) != true)
                {
                    outrasRetencoesField = value;
                    OnPropertyChanged("OutrasRetencoes");
                }
            }
        }

        [XmlIgnore()]
        public bool OutrasRetencoesSpecified
        {
            get
            {
                return outrasRetencoesField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    outrasRetencoesField = default;
                }
            }
        }

        public decimal BaseCalculo
        {
            get
            {
                if (baseCalculoField.HasValue)
                {
                    return baseCalculoField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (baseCalculoField.Equals(value) != true)
                {
                    baseCalculoField = value;
                    OnPropertyChanged("BaseCalculo");
                }
            }
        }

        [XmlIgnore()]
        public bool BaseCalculoSpecified
        {
            get
            {
                return baseCalculoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    baseCalculoField = default;
                }
            }
        }

        public decimal Aliquota
        {
            get
            {
                if (aliquotaField.HasValue)
                {
                    return aliquotaField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (aliquotaField.Equals(value) != true)
                {
                    aliquotaField = value;
                    OnPropertyChanged("Aliquota");
                }
            }
        }

        [XmlIgnore()]
        public bool AliquotaSpecified
        {
            get
            {
                return aliquotaField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    aliquotaField = default;
                }
            }
        }

        public decimal ValorLiquidoNfse
        {
            get
            {
                if (valorLiquidoNfseField.HasValue)
                {
                    return valorLiquidoNfseField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorLiquidoNfseField.Equals(value) != true)
                {
                    valorLiquidoNfseField = value;
                    OnPropertyChanged("ValorLiquidoNfse");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorLiquidoNfseSpecified
        {
            get
            {
                return valorLiquidoNfseField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorLiquidoNfseField = default;
                }
            }
        }

        public decimal DescontoIncondicionado
        {
            get
            {
                if (descontoIncondicionadoField.HasValue)
                {
                    return descontoIncondicionadoField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (descontoIncondicionadoField.Equals(value) != true)
                {
                    descontoIncondicionadoField = value;
                    OnPropertyChanged("DescontoIncondicionado");
                }
            }
        }

        [XmlIgnore()]
        public bool DescontoIncondicionadoSpecified
        {
            get
            {
                return descontoIncondicionadoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    descontoIncondicionadoField = default;
                }
            }
        }

        public decimal DescontoCondicionado
        {
            get
            {
                if (descontoCondicionadoField.HasValue)
                {
                    return descontoCondicionadoField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (descontoCondicionadoField.Equals(value) != true)
                {
                    descontoCondicionadoField = value;
                    OnPropertyChanged("DescontoCondicionado");
                }
            }
        }

        [XmlIgnore()]
        public bool DescontoCondicionadoSpecified
        {
            get
            {
                return descontoCondicionadoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    descontoCondicionadoField = default;
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcDadosServico : INotifyPropertyChanged
    {
        private tcValores valoresField;
        private int issRetidoField;
        private string itemListaServicoField;
        private int? codigoCnaeField;
        private string codigoTributacaoMunicipioField;
        private string discriminacaoField;
        private int codigoMunicipioField;

        public tcDadosServico() : base()
        {
            valoresField = new tcValores();
        }

        public tcValores Valores
        {
            get
            {
                return valoresField;
            }

            set
            {
                if (valoresField is null || valoresField.Equals(value) != true)
                {
                    valoresField = value;
                    OnPropertyChanged("Valores");
                }
            }
        }

        /// <summary>
        /// ATENÇÃO: Disponível apenas no padrão ABRASF. Outros layoutes retornarão NULL
        /// </summary>
        public int IssRetido
        {
            get
            {
                return issRetidoField;
            }

            set
            {
                if (issRetidoField == default || issRetidoField.Equals(value) != true)
                {
                    issRetidoField = value;
                    OnPropertyChanged("IssRetido");
                }
            }
        }

        public string ItemListaServico
        {
            get
            {
                return itemListaServicoField;
            }

            set
            {
                if (itemListaServicoField is null || itemListaServicoField.Equals(value) != true)
                {
                    itemListaServicoField = value;
                    OnPropertyChanged("ItemListaServico");
                }
            }
        }

        public int CodigoCnae
        {
            get
            {
                if (codigoCnaeField.HasValue)
                {
                    return codigoCnaeField.Value;
                }
                else
                {
                    return Conversions.ToInteger(default);
                }
            }

            set
            {
                if (codigoCnaeField.Equals(value) != true)
                {
                    codigoCnaeField = value;
                    OnPropertyChanged("CodigoCnae");
                }
            }
        }

        [XmlIgnore()]
        public bool CodigoCnaeSpecified
        {
            get
            {
                return codigoCnaeField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    codigoCnaeField = default;
                }
            }
        }

        public string CodigoTributacaoMunicipio
        {
            get
            {
                return codigoTributacaoMunicipioField;
            }

            set
            {
                if (codigoTributacaoMunicipioField is null || codigoTributacaoMunicipioField.Equals(value) != true)
                {
                    codigoTributacaoMunicipioField = value;
                    OnPropertyChanged("CodigoTributacaoMunicipio");
                }
            }
        }

        public string Discriminacao
        {
            get
            {
                return discriminacaoField;
            }

            set
            {
                if (discriminacaoField is null || discriminacaoField.Equals(value) != true)
                {
                    discriminacaoField = value;
                    OnPropertyChanged("Discriminacao");
                }
            }
        }

        public int CodigoMunicipio
        {
            get
            {
                return codigoMunicipioField;
            }

            set
            {
                if (codigoMunicipioField.Equals(value) != true)
                {
                    codigoMunicipioField = value;
                    OnPropertyChanged("CodigoMunicipio");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcDadosConstrucaoCivil : INotifyPropertyChanged
    {
        private string codigoObraField;
        private string artField;

        public string CodigoObra
        {
            get
            {
                return codigoObraField;
            }

            set
            {
                if (codigoObraField is null || codigoObraField.Equals(value) != true)
                {
                    codigoObraField = value;
                    OnPropertyChanged("CodigoObra");
                }
            }
        }

        public string Art
        {
            get
            {
                return artField;
            }

            set
            {
                if (artField is null || artField.Equals(value) != true)
                {
                    artField = value;
                    OnPropertyChanged("Art");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcDadosPrestador : INotifyPropertyChanged
    {
        private tcIdentificacaoPrestador identificacaoPrestadorField;
        private string razaoSocialField;
        private string nomeFantasiaField;
        private tcEndereco enderecoField;
        private tcContato contatoField;

        public tcDadosPrestador() : base()
        {
            contatoField = new tcContato();
            enderecoField = new tcEndereco();
            identificacaoPrestadorField = new tcIdentificacaoPrestador();
        }

        public tcIdentificacaoPrestador IdentificacaoPrestador
        {
            get
            {
                return identificacaoPrestadorField;
            }

            set
            {
                if (identificacaoPrestadorField is null || identificacaoPrestadorField.Equals(value) != true)
                {
                    identificacaoPrestadorField = value;
                    OnPropertyChanged("IdentificacaoPrestador");
                }
            }
        }

        public string RazaoSocial
        {
            get
            {
                return razaoSocialField;
            }

            set
            {
                if (razaoSocialField is null || razaoSocialField.Equals(value) != true)
                {
                    razaoSocialField = value;
                    OnPropertyChanged("RazaoSocial");
                }
            }
        }

        public string NomeFantasia
        {
            get
            {
                return nomeFantasiaField;
            }

            set
            {
                if (nomeFantasiaField is null || nomeFantasiaField.Equals(value) != true)
                {
                    nomeFantasiaField = value;
                    OnPropertyChanged("NomeFantasia");
                }
            }
        }

        public tcEndereco Endereco
        {
            get
            {
                return enderecoField;
            }

            set
            {
                if (enderecoField is null || enderecoField.Equals(value) != true)
                {
                    enderecoField = value;
                    OnPropertyChanged("Endereco");
                }
            }
        }

        public tcContato Contato
        {
            get
            {
                return contatoField;
            }

            set
            {
                if (contatoField is null || contatoField.Equals(value) != true)
                {
                    contatoField = value;
                    OnPropertyChanged("Contato");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcInfRps : INotifyPropertyChanged
    {
        private tcIdentificacaoRps identificacaoRpsField;
        private DateTime dataEmissaoField;
        private int naturezaOperacaoField;
        private int? regimeEspecialTributacaoField;
        private int optanteSimplesNacionalField;
        private int incentivadorCulturalField;
        private int statusField;
        private tcIdentificacaoRps rpsSubstituidoField;
        private tcDadosServico servicoField;
        private tcIdentificacaoPrestador prestadorField;
        private tcDadosTomador tomadorField;
        private tcIdentificacaoIntermediarioServico intermediarioServicoField;
        private tcDadosConstrucaoCivil construcaoCivilField;
        private string idField;

        public tcInfRps() : base()
        {
            construcaoCivilField = new tcDadosConstrucaoCivil();
            intermediarioServicoField = new tcIdentificacaoIntermediarioServico();
            tomadorField = new tcDadosTomador();
            prestadorField = new tcIdentificacaoPrestador();
            servicoField = new tcDadosServico();
            rpsSubstituidoField = new tcIdentificacaoRps();
            identificacaoRpsField = new tcIdentificacaoRps();
        }

        public tcIdentificacaoRps IdentificacaoRps
        {
            get
            {
                return identificacaoRpsField;
            }

            set
            {
                if (identificacaoRpsField is null || identificacaoRpsField.Equals(value) != true)
                {
                    identificacaoRpsField = value;
                    OnPropertyChanged("IdentificacaoRps");
                }
            }
        }

        public DateTime DataEmissao
        {
            get
            {
                return dataEmissaoField;
            }

            set
            {
                if (dataEmissaoField.Equals(value) != true)
                {
                    dataEmissaoField = value;
                    OnPropertyChanged("DataEmissao");
                }
            }
        }

        public int NaturezaOperacao
        {
            get
            {
                return naturezaOperacaoField;
            }

            set
            {
                if (naturezaOperacaoField == default || naturezaOperacaoField.Equals(value) != true)
                {
                    naturezaOperacaoField = value;
                    OnPropertyChanged("NaturezaOperacao");
                }
            }
        }

        public int RegimeEspecialTributacao
        {
            get
            {
                if (regimeEspecialTributacaoField.HasValue)
                {
                    return regimeEspecialTributacaoField.Value;
                }
                else
                {
                    return Conversions.ToInteger(default);
                }
            }

            set
            {
                if (regimeEspecialTributacaoField is null || regimeEspecialTributacaoField.Equals(value) != true)
                {
                    regimeEspecialTributacaoField = value;
                    OnPropertyChanged("RegimeEspecialTributacao");
                }
            }
        }

        [XmlIgnore()]
        public bool RegimeEspecialTributacaoSpecified
        {
            get
            {
                return regimeEspecialTributacaoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    regimeEspecialTributacaoField = default;
                }
            }
        }

        public int OptanteSimplesNacional
        {
            get
            {
                return optanteSimplesNacionalField;
            }

            set
            {
                if (optanteSimplesNacionalField == default || optanteSimplesNacionalField.Equals(value) != true)
                {
                    optanteSimplesNacionalField = value;
                    OnPropertyChanged("OptanteSimplesNacional");
                }
            }
        }

        public int IncentivadorCultural
        {
            get
            {
                return incentivadorCulturalField;
            }

            set
            {
                if (incentivadorCulturalField == default || incentivadorCulturalField.Equals(value) != true)
                {
                    incentivadorCulturalField = value;
                    OnPropertyChanged("IncentivadorCultural");
                }
            }
        }

        public int Status
        {
            get
            {
                return statusField;
            }

            set
            {
                if (statusField == default || statusField.Equals(value) != true)
                {
                    statusField = value;
                    OnPropertyChanged("Status");
                }
            }
        }

        public tcIdentificacaoRps RpsSubstituido
        {
            get
            {
                return rpsSubstituidoField;
            }

            set
            {
                if (rpsSubstituidoField is null || rpsSubstituidoField.Equals(value) != true)
                {
                    rpsSubstituidoField = value;
                    OnPropertyChanged("RpsSubstituido");
                }
            }
        }

        public tcDadosServico Servico
        {
            get
            {
                return servicoField;
            }

            set
            {
                if (servicoField is null || servicoField.Equals(value) != true)
                {
                    servicoField = value;
                    OnPropertyChanged("Servico");
                }
            }
        }

        public tcIdentificacaoPrestador Prestador
        {
            get
            {
                return prestadorField;
            }

            set
            {
                if (prestadorField is null || prestadorField.Equals(value) != true)
                {
                    prestadorField = value;
                    OnPropertyChanged("Prestador");
                }
            }
        }

        public tcDadosTomador Tomador
        {
            get
            {
                return tomadorField;
            }

            set
            {
                if (tomadorField is null || tomadorField.Equals(value) != true)
                {
                    tomadorField = value;
                    OnPropertyChanged("Tomador");
                }
            }
        }

        public tcIdentificacaoIntermediarioServico IntermediarioServico
        {
            get
            {
                return intermediarioServicoField;
            }

            set
            {
                if (intermediarioServicoField is null || intermediarioServicoField.Equals(value) != true)
                {
                    intermediarioServicoField = value;
                    OnPropertyChanged("IntermediarioServico");
                }
            }
        }

        public tcDadosConstrucaoCivil ConstrucaoCivil
        {
            get
            {
                return construcaoCivilField;
            }

            set
            {
                if (construcaoCivilField is null || construcaoCivilField.Equals(value) != true)
                {
                    construcaoCivilField = value;
                    OnPropertyChanged("ConstrucaoCivil");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class tcIdentificacaoNfse : INotifyPropertyChanged
    {
        private string numeroField;
        private string codigoVerificacaoField;
        private string cnpjField;
        private string inscricaoMunicipalField;
        private int codigoMunicipioField;

        [XmlElement(DataType = "nonNegativeInteger")]
        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string CodigoVerificacao
        {
            get
            {
                return codigoVerificacaoField;
            }

            set
            {
                if (codigoVerificacaoField is null || codigoVerificacaoField.Equals(value) != true)
                {
                    codigoVerificacaoField = value;
                    OnPropertyChanged("CodigoVerificacao");
                }
            }
        }

        public string Cnpj
        {
            get
            {
                return cnpjField;
            }

            set
            {
                if (cnpjField is null || cnpjField.Equals(value) != true)
                {
                    cnpjField = value;
                    OnPropertyChanged("Cnpj");
                }
            }
        }

        public string InscricaoMunicipal
        {
            get
            {
                return inscricaoMunicipalField;
            }

            set
            {
                if (inscricaoMunicipalField is null || inscricaoMunicipalField.Equals(value) != true)
                {
                    inscricaoMunicipalField = value;
                    OnPropertyChanged("InscricaoMunicipal");
                }
            }
        }

        public int CodigoMunicipio
        {
            get
            {
                return codigoMunicipioField;
            }

            set
            {
                if (codigoMunicipioField.Equals(value) != true)
                {
                    codigoMunicipioField = value;
                    OnPropertyChanged("CodigoMunicipio");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    public partial class tcInfNfse : INotifyPropertyChanged
    {
        private string numeroField;
        private string codigoVerificacaoField;
        private DateTime dataEmissaoField;
        private tcIdentificacaoRps identificacaoRpsField;
        private tcIdentificacaoNfse identificacaoNFseField;
        private DateTime? dataEmissaoRpsField;
        private int naturezaOperacaoField;
        private int? regimeEspecialTributacaoField;
        private int optanteSimplesNacionalField;
        private int incentivadorCulturalField;
        private string competenciaField;
        private NfseSubstituida nfseSubstituidaField;
        private string outrasInformacoesField;
        private tcDadosServico servicoField;
        private decimal? valorCreditoField;
        private tcDadosPrestador prestadorServicoField;
        private tcDadosTomador tomadorServicoField;
        private tcIdentificacaoIntermediarioServico intermediarioServicoField;
        private tcIdentificacaoOrgaoGerador orgaoGeradorField;
        private tcDadosConstrucaoCivil construcaoCivilField;
        private string idField;

        public tcInfNfse() : base()
        {
            construcaoCivilField = new tcDadosConstrucaoCivil();
            orgaoGeradorField = new tcIdentificacaoOrgaoGerador();
            intermediarioServicoField = new tcIdentificacaoIntermediarioServico();
            tomadorServicoField = new tcDadosTomador();
            prestadorServicoField = new tcDadosPrestador();
            servicoField = new tcDadosServico();
            identificacaoRpsField = new tcIdentificacaoRps();
            identificacaoNFseField = new tcIdentificacaoNfse();
        }

        [XmlElement(DataType = "nonNegativeInteger")]
        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string CodigoVerificacao
        {
            get
            {
                return codigoVerificacaoField;
            }

            set
            {
                if (codigoVerificacaoField is null || codigoVerificacaoField.Equals(value) != true)
                {
                    codigoVerificacaoField = value;
                    OnPropertyChanged("CodigoVerificacao");
                }
            }
        }

        public DateTime DataEmissao
        {
            get
            {
                return dataEmissaoField;
            }

            set
            {
                if (dataEmissaoField.Equals(value) != true)
                {
                    dataEmissaoField = value;
                    OnPropertyChanged("DataEmissao");
                }
            }
        }

        public tcIdentificacaoRps IdentificacaoRps
        {
            get
            {
                return identificacaoRpsField;
            }

            set
            {
                if (identificacaoRpsField is null || identificacaoRpsField.Equals(value) != true)
                {
                    identificacaoRpsField = value;
                    OnPropertyChanged("IdentificacaoRps");
                }
            }
        }

        public tcIdentificacaoNfse IdentificacaoNfse
        {
            get
            {
                return identificacaoNFseField;
            }

            set
            {
                if (identificacaoRpsField is null || identificacaoNFseField.Equals(value) != true)
                {
                    identificacaoNFseField = value;
                    OnPropertyChanged("IdentificacaoNfse");
                }
            }
        }

        [XmlElement("DataEmissaoRps")]
        public string DataEmissaoRpsString   // Date
        {
            get
            {
                if (dataEmissaoRpsField.HasValue)
                    return Conversions.ToString(dataEmissaoRpsField);
                else
                    return null;
            }

            set
            {
                if (dataEmissaoRpsField.Equals(value) != true)
                {
                    if (string.IsNullOrEmpty(value))
                    {
                        dataEmissaoRpsField = default;
                    }
                    else if (value.ToString().Length == 10)
                    {
                        var dt = value.Split("-");
                        dataEmissaoRpsField = new DateTime(Conversions.ToInteger(dt[0]), Conversions.ToInteger(dt[1]), Conversions.ToInteger(dt[2])); // value
                    }
                    else
                    {
                        var dt = value.Split("-");
                        dataEmissaoRpsField = DateTime.Parse(value);
                    }

                    OnPropertyChanged("DataEmissaoRpsString");
                    OnPropertyChanged("DataEmissaoRps");
                }
            }
        }

        [XmlIgnore]
        public DateTime? DataEmissaoRps
        {
            get
            {
                return dataEmissaoRpsField;
            }

            set
            {
                if (dataEmissaoRpsField.Equals(value) != true)
                {
                    dataEmissaoRpsField = value;
                    OnPropertyChanged("DataEmissaoRps");
                }
            }
        }

        [XmlIgnore()]
        public bool DataEmissaoRpsSpecified
        {
            get
            {
                return dataEmissaoRpsField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    dataEmissaoRpsField = default;
                }
            }
        }

        public int NaturezaOperacao
        {
            get
            {
                return naturezaOperacaoField;
            }

            set
            {
                if (naturezaOperacaoField == default || naturezaOperacaoField.Equals(value) != true)
                {
                    naturezaOperacaoField = value;
                    OnPropertyChanged("NaturezaOperacao");
                }
            }
        }

        public int RegimeEspecialTributacao
        {
            get
            {
                if (regimeEspecialTributacaoField.HasValue)
                {
                    return regimeEspecialTributacaoField.Value;
                }
                else
                {
                    return Conversions.ToInteger(default);
                }
            }

            set
            {
                if (regimeEspecialTributacaoField is null || regimeEspecialTributacaoField.Equals(value) != true)
                {
                    regimeEspecialTributacaoField = value;
                    OnPropertyChanged("RegimeEspecialTributacao");
                }
            }
        }

        [XmlIgnore()]
        public bool RegimeEspecialTributacaoSpecified
        {
            get
            {
                return regimeEspecialTributacaoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    regimeEspecialTributacaoField = default;
                }
            }
        }

        public int OptanteSimplesNacional
        {
            get
            {
                return optanteSimplesNacionalField;
            }

            set
            {
                if (optanteSimplesNacionalField == default || optanteSimplesNacionalField.Equals(value) != true)
                {
                    optanteSimplesNacionalField = value;
                    OnPropertyChanged("OptanteSimplesNacional");
                }
            }
        }

        public int IncentivadorCultural
        {
            get
            {
                return incentivadorCulturalField;
            }

            set
            {
                if (incentivadorCulturalField == default || incentivadorCulturalField.Equals(value) != true)
                {
                    incentivadorCulturalField = value;
                    OnPropertyChanged("IncentivadorCultural");
                }
            }
        }

        [XmlElement()]
        public string Competencia
        {
            get
            {
                return competenciaField;
            }

            set
            {
                if (competenciaField is null || competenciaField.Equals(value) != true)
                {
                    competenciaField = value;
                    OnPropertyChanged("Competencia");
                }
            }
        }

        public NfseSubstituida NfseSubstituida
        {
            get
            {
                return nfseSubstituidaField;
            }

            set
            {
                if (nfseSubstituidaField is null || nfseSubstituidaField.Equals(value) != true)
                {
                    nfseSubstituidaField = value;
                    OnPropertyChanged("NfseSubstituida");
                }
            }
        }

        public string OutrasInformacoes
        {
            get
            {
                return outrasInformacoesField;
            }

            set
            {
                if (outrasInformacoesField is null || outrasInformacoesField.Equals(value) != true)
                {
                    outrasInformacoesField = value;
                    OnPropertyChanged("OutrasInformacoes");
                }
            }
        }

        public tcDadosServico Servico
        {
            get
            {
                return servicoField;
            }

            set
            {
                if (servicoField is null || servicoField.Equals(value) != true)
                {
                    servicoField = value;
                    OnPropertyChanged("Servico");
                }
            }
        }

        public decimal ValorCredito
        {
            get
            {
                if (valorCreditoField.HasValue)
                {
                    return valorCreditoField.Value;
                }
                else
                {
                    return default;
                }
            }

            set
            {
                if (valorCreditoField.Equals(value) != true)
                {
                    valorCreditoField = value;
                    OnPropertyChanged("ValorCredito");
                }
            }
        }

        [XmlIgnore()]
        public bool ValorCreditoSpecified
        {
            get
            {
                return valorCreditoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    valorCreditoField = default;
                }
            }
        }

        public tcDadosPrestador PrestadorServico
        {
            get
            {
                return prestadorServicoField;
            }

            set
            {
                if (prestadorServicoField is null || prestadorServicoField.Equals(value) != true)
                {
                    prestadorServicoField = value;
                    OnPropertyChanged("PrestadorServico");
                }
            }
        }

        /// <summary>
        /// ATENÇÃO: Disponível apenas no padrão ABRASF. Outros layoutes retornarão NULL
        /// </summary>
        public tcDadosPrestador Prestador
        {
            get
            {
                return prestadorServicoField;
            }

            set
            {
                if (prestadorServicoField is null || prestadorServicoField.Equals(value) != true)
                {
                    prestadorServicoField = value;
                    OnPropertyChanged("Prestador");
                }
            }
        }

        public tcDadosTomador TomadorServico
        {
            get
            {
                return tomadorServicoField;
            }

            set
            {
                if (tomadorServicoField is null || tomadorServicoField.Equals(value) != true)
                {
                    tomadorServicoField = value;
                    OnPropertyChanged("TomadorServico");
                }
            }
        }

        /// <summary>
        /// ATENÇÃO: Disponível apenas no padrão ABRASF. Outros layoutes retornarão NULL
        /// </summary>
        public tcDadosTomador Tomador
        {
            get
            {
                return tomadorServicoField;
            }

            set
            {
                if (tomadorServicoField is null || tomadorServicoField.Equals(value) != true)
                {
                    tomadorServicoField = value;
                    OnPropertyChanged("Tomador");
                }
            }
        }

        public tcIdentificacaoIntermediarioServico IntermediarioServico
        {
            get
            {
                return intermediarioServicoField;
            }

            set
            {
                if (intermediarioServicoField is null || intermediarioServicoField.Equals(value) != true)
                {
                    intermediarioServicoField = value;
                    OnPropertyChanged("IntermediarioServico");
                }
            }
        }

        public tcIdentificacaoOrgaoGerador OrgaoGerador
        {
            get
            {
                return orgaoGeradorField;
            }

            set
            {
                if (orgaoGeradorField is null || orgaoGeradorField.Equals(value) != true)
                {
                    orgaoGeradorField = value;
                    OnPropertyChanged("OrgaoGerador");
                }
            }
        }

        public tcDadosConstrucaoCivil ConstrucaoCivil
        {
            get
            {
                return construcaoCivilField;
            }

            set
            {
                if (construcaoCivilField is null || construcaoCivilField.Equals(value) != true)
                {
                    construcaoCivilField = value;
                    OnPropertyChanged("ConstrucaoCivil");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = true)]
    public partial class NfseSubstituida : INotifyPropertyChanged
    {
        private string numeroField;
        private string codigoVerificacaoField;

        public NfseSubstituida() : base()
        {
        }

        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string CodigoVerificacao
        {
            get
            {
                return codigoVerificacaoField;
            }

            set
            {
                if (codigoVerificacaoField is null || codigoVerificacaoField.Equals(value) != true)
                {
                    codigoVerificacaoField = value;
                    OnPropertyChanged("CodigoVerificacao");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }


    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignatureType : INotifyPropertyChanged
    {
        private SignedInfoType signedInfoField;
        private SignatureValueType signatureValueField;
        private KeyInfoType keyInfoField;
        private string idField;

        public SignatureType() : base()
        {
            keyInfoField = new KeyInfoType();
            signatureValueField = new SignatureValueType();
            signedInfoField = new SignedInfoType();
        }

        public SignedInfoType SignedInfo
        {
            get
            {
                return signedInfoField;
            }

            set
            {
                if (signedInfoField is null || signedInfoField.Equals(value) != true)
                {
                    signedInfoField = value;
                    OnPropertyChanged("SignedInfo");
                }
            }
        }

        public SignatureValueType SignatureValue
        {
            get
            {
                return signatureValueField;
            }

            set
            {
                if (signatureValueField is null || signatureValueField.Equals(value) != true)
                {
                    signatureValueField = value;
                    OnPropertyChanged("SignatureValue");
                }
            }
        }

        public KeyInfoType KeyInfo
        {
            get
            {
                return keyInfoField;
            }

            set
            {
                if (keyInfoField is null || keyInfoField.Equals(value) != true)
                {
                    keyInfoField = value;
                    OnPropertyChanged("KeyInfo");
                }
            }
        }

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoType : INotifyPropertyChanged
    {
        private SignedInfoTypeCanonicalizationMethod canonicalizationMethodField;
        private SignedInfoTypeSignatureMethod signatureMethodField;
        private ReferenceType referenceField;
        private string idField;

        public SignedInfoType() : base()
        {
            referenceField = new ReferenceType();
            signatureMethodField = new SignedInfoTypeSignatureMethod();
            canonicalizationMethodField = new SignedInfoTypeCanonicalizationMethod();
        }

        public SignedInfoTypeCanonicalizationMethod CanonicalizationMethod
        {
            get
            {
                return canonicalizationMethodField;
            }

            set
            {
                if (canonicalizationMethodField is null || canonicalizationMethodField.Equals(value) != true)
                {
                    canonicalizationMethodField = value;
                    OnPropertyChanged("CanonicalizationMethod");
                }
            }
        }

        public SignedInfoTypeSignatureMethod SignatureMethod
        {
            get
            {
                return signatureMethodField;
            }

            set
            {
                if (signatureMethodField is null || signatureMethodField.Equals(value) != true)
                {
                    signatureMethodField = value;
                    OnPropertyChanged("SignatureMethod");
                }
            }
        }

        public ReferenceType Reference
        {
            get
            {
                return referenceField;
            }

            set
            {
                if (referenceField is null || referenceField.Equals(value) != true)
                {
                    referenceField = value;
                    OnPropertyChanged("Reference");
                }
            }
        }

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoTypeCanonicalizationMethod : INotifyPropertyChanged
    {
        private string algorithmField;

        public SignedInfoTypeCanonicalizationMethod() : base()
        {
            algorithmField = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
        }

        [XmlAttribute(DataType = "anyURI")]
        public string Algorithm
        {
            get
            {
                return algorithmField;
            }

            set
            {
                if (algorithmField is null || algorithmField.Equals(value) != true)
                {
                    algorithmField = value;
                    OnPropertyChanged("Algorithm");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignedInfoTypeSignatureMethod : INotifyPropertyChanged
    {
        private string algorithmField;

        public SignedInfoTypeSignatureMethod() : base()
        {
            algorithmField = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
        }

        [XmlAttribute(DataType = "anyURI")]
        public string Algorithm
        {
            get
            {
                return algorithmField;
            }

            set
            {
                if (algorithmField is null || algorithmField.Equals(value) != true)
                {
                    algorithmField = value;
                    OnPropertyChanged("Algorithm");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class ReferenceType : INotifyPropertyChanged
    {
        private List<TransformType> transformsField;
        private ReferenceTypeDigestMethod digestMethodField;
        private byte[] digestValueField;
        private string idField;
        private string uRIField;
        private string typeField;

        public ReferenceType() : base()
        {
            digestMethodField = new ReferenceTypeDigestMethod();
            transformsField = new List<TransformType>();
        }

        [XmlArrayItem("Transform", IsNullable = false)]
        public List<TransformType> Transforms
        {
            get
            {
                return transformsField;
            }

            set
            {
                if (transformsField is null || transformsField.Equals(value) != true)
                {
                    transformsField = value;
                    OnPropertyChanged("Transforms");
                }
            }
        }

        public ReferenceTypeDigestMethod DigestMethod
        {
            get
            {
                return digestMethodField;
            }

            set
            {
                if (digestMethodField is null || digestMethodField.Equals(value) != true)
                {
                    digestMethodField = value;
                    OnPropertyChanged("DigestMethod");
                }
            }
        }

        [XmlElement(DataType = "base64Binary")]
        public byte[] DigestValue
        {
            get
            {
                return digestValueField;
            }

            set
            {
                if (digestValueField is null || digestValueField.Equals(value) != true)
                {
                    digestValueField = value;
                    OnPropertyChanged("DigestValue");
                }
            }
        }

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        public string URI
        {
            get
            {
                return uRIField;
            }

            set
            {
                if (uRIField is null || uRIField.Equals(value) != true)
                {
                    uRIField = value;
                    OnPropertyChanged("URI");
                }
            }
        }

        [XmlAttribute(DataType = "anyURI")]
        public string Type
        {
            get
            {
                return typeField;
            }

            set
            {
                if (typeField is null || typeField.Equals(value) != true)
                {
                    typeField = value;
                    OnPropertyChanged("Type");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class TransformType : INotifyPropertyChanged
    {
        private List<string> xPathField;
        private TTransformURI algorithmField;

        public TransformType() : base()
        {
            xPathField = new List<string>();
        }

        [XmlElement("XPath")]
        public List<string> XPath
        {
            get
            {
                return xPathField;
            }

            set
            {
                if (xPathField is null || xPathField.Equals(value) != true)
                {
                    xPathField = value;
                    OnPropertyChanged("XPath");
                }
            }
        }

        [XmlAttribute()]
        public TTransformURI Algorithm
        {
            get
            {
                return algorithmField;
            }

            set
            {
                if (algorithmField.Equals(value) != true)
                {
                    algorithmField = value;
                    OnPropertyChanged("Algorithm");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public enum TTransformURI
    {

        /// <remarks/>
        [XmlEnum("http://www.w3.org/2000/09/xmldsig#enveloped-signature")]
        httpwwww3org200009xmldsigenvelopedsignature,

        /// <remarks/>
        [XmlEnum("http://www.w3.org/TR/2001/REC-xml-c14n-20010315")]
        httpwwww3orgTR2001RECxmlc14n20010315
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class ReferenceTypeDigestMethod : INotifyPropertyChanged
    {
        private string algorithmField;

        public ReferenceTypeDigestMethod() : base()
        {
            algorithmField = "http://www.w3.org/2000/09/xmldsig#sha1";
        }

        [XmlAttribute(DataType = "anyURI")]
        public string Algorithm
        {
            get
            {
                return algorithmField;
            }

            set
            {
                if (algorithmField is null || algorithmField.Equals(value) != true)
                {
                    algorithmField = value;
                    OnPropertyChanged("Algorithm");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class SignatureValueType : INotifyPropertyChanged
    {
        private string idField;
        private byte[] valueField;

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        [XmlText(DataType = "base64Binary")]
        public byte[] Value
        {
            get
            {
                return valueField;
            }

            set
            {
                if (valueField is null || valueField.Equals(value) != true)
                {
                    valueField = value;
                    OnPropertyChanged("Value");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class KeyInfoType : INotifyPropertyChanged
    {
        private X509DataType x509DataField;
        private string idField;

        public KeyInfoType() : base()
        {
            x509DataField = new X509DataType();
        }

        public X509DataType X509Data
        {
            get
            {
                return x509DataField;
            }

            set
            {
                if (x509DataField is null || x509DataField.Equals(value) != true)
                {
                    x509DataField = value;
                    OnPropertyChanged("X509Data");
                }
            }
        }

        [XmlAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.18033")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.w3.org/2000/09/xmldsig#")]
    public partial class X509DataType : INotifyPropertyChanged
    {
        private byte[] x509CertificateField;

        [XmlElement(DataType = "base64Binary")]
        public byte[] X509Certificate
        {
            get
            {
                return x509CertificateField;
            }

            set
            {
                if (x509CertificateField is null || x509CertificateField.Equals(value) != true)
                {
                    x509CertificateField = value;
                    OnPropertyChanged("X509Certificate");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */

}