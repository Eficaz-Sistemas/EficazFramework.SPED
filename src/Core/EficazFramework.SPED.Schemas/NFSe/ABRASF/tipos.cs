// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>NFSe.Classes.GINFES</NameSpace><Collection>List</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.Serialization;
using EficazFramework.SPED.Schemas.NFSe.Common;
using EficazFramework.SPED.Utilities.XML;

namespace EficazFramework.SPED.Schemas.NFSe.ABRASF
{

    /* TODO ERROR: Skipped RegionDirectiveTrivia */
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    public partial class ConsultarNFseResposta : INotifyPropertyChanged, IXmlSpedDocument
    {
        public ConsultarNFseResposta() : base()
        {
        }

        private tcListaNfse itemField = new tcListaNfse();
        private static XmlSerializer sSerializer;

        /// <remarks/>
        [XmlElement("ListaNfse")]
        public tcListaNfse Documentos
        {
            get
            {
                return itemField;
            }

            set
            {
                itemField = value;
                RaisePropertyChanged("Documentos");
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(ConsultarNFseResposta));
                }

                return sSerializer;
            }
        }

        public XmlDocumentType DocumentType
        {
            get
            {
                return XmlDocumentType.NFSe_ABRASF_ConsultaLoteNFSe;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                return Documentos.Items?.FirstOrDefault()?.DataEmissao;
            }
        }

        public string Chave
        {
            get
            {
                return Documentos.Items?.FirstOrDefault()?.Nfse.InfNfse.CodigoVerificacao;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref ConsultarNFseResposta obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref ConsultarNFseResposta obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static ConsultarNFseResposta Deserialize(
            string xml,
            string alias = "http://www.abrasf.org.br/ABRASF/arquivos/nfse.xsd")
        {
            System.IO.StringReader stringReader = null;
            try
            {
                // Dim result As String = xml.Replace("ns1:", String.Empty).Replace("ns2:", String.Empty).Replace("ns3:", String.Empty).Replace("ns4:", String.Empty).Replace("ns5:", String.Empty).Replace(":ns1", String.Empty).Replace(":ns2", String.Empty).Replace(":ns3", String.Empty).Replace(":ns4", String.Empty).Replace(":ns5", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_cancelar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/tipos""", String.Empty).Replace("xmlns=""http://www.ginfes.com.br/servico_consultar_nfse_envio""", String.Empty).Replace("xmlns=""http://www.w3.org/2000/09/xmldsig#""", String.Empty)

                var tmpreader = new System.IO.StringReader(xml);
                var po = XDocument.Load(tmpreader);
                string rootName = po.Root.Name.LocalName;
                sSerializer = new System.Xml.Serialization.XmlSerializer(typeof(ConsultarNFseResposta), null, null, new XmlRootAttribute(rootName), alias);
                
                po = null;
                tmpreader.Dispose();
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...

                return (ConsultarNFseResposta)sSerializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), ConsultarLoteRpsResposta)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ConsultarNFseResposta Deserialize(System.IO.Stream s)
        {
            return (ConsultarNFseResposta)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref ConsultarNFseResposta obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref ConsultarNFseResposta obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static ConsultarNFseResposta LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<ConsultarNFseResposta> LoadFromAsync(
            System.IO.Stream source, 
            bool close_stream = true, 
            string alias = "http://www.abrasf.org.br/ABRASF/arquivos/nfse.xsd")
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot(IsNullable = false)]
    public partial class tcListaNfse : INotifyPropertyChanged
    {
        public tcListaNfse() : base()
        {
            // Me.nfseSubstituicaoField = New tcSubstituicaoNfse()
            // Me.nfseCancelamentoField = New tcCancelamentoNfse()
            // Me.nfseField = New NFSe()
        }

        private List<tcCompNfse> compnfseList = new List<tcCompNfse>();

        [XmlElement("CompNfse")]
        public List<tcCompNfse> Items
        {
            get
            {
                return compnfseList;
            }

            set
            {
                if (compnfseList is null || compnfseList.Equals(value) != true)
                {
                    compnfseList = value;
                    OnPropertyChanged("Items");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    [XmlRoot("CompNfse", IsNullable = false)]
    public partial class tcCompNfse : INotifyPropertyChanged, IXmlSpedDocument
    {
        private NFSe nfseField;
        private tcCancelamentoNfse nfseCancelamentoField;
        private tcSubstituicaoNfse nfseSubstituicaoField;
        private static XmlSerializer sSerializer;

        public tcCompNfse() : base()
        {
            // Me.nfseSubstituicaoField = New tcSubstituicaoNfse()
            // Me.nfseCancelamentoField = New tcCancelamentoNfse()
            // Me.nfseField = New NFSe()
        }

        [XmlElement("Nfse")]
        public virtual NFSe Nfse
        {
            get
            {
                return nfseField;
            }

            set
            {
                if (nfseField is null || nfseField.Equals(value) != true)
                {
                    nfseField = value;
                    OnPropertyChanged("Nfse");
                }
            }
        }

        public tcCancelamentoNfse NfseCancelamento
        {
            get
            {
                return nfseCancelamentoField;
            }

            set
            {
                if (nfseCancelamentoField is null || nfseCancelamentoField.Equals(value) != true)
                {
                    nfseCancelamentoField = value;
                    OnPropertyChanged("NfseCancelamento");
                }
            }
        }

        public tcSubstituicaoNfse NfseSubstituicao
        {
            get
            {
                return nfseSubstituicaoField;
            }

            set
            {
                if (nfseSubstituicaoField is null || nfseSubstituicaoField.Equals(value) != true)
                {
                    nfseSubstituicaoField = value;
                    OnPropertyChanged("NfseSubstituicao");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(tcCompNfse));
                }

                return sSerializer;
            }
        }

        public XmlDocumentType DocumentType
        {
            get
            {
                return XmlDocumentType.NFSe_CommonSchema;
            }
        }

        public DateTime? DataEmissao
        {
            get
            {
                if (Nfse is null)
                    return default;
                if (Nfse.InfNfse is null)
                    return default;
                return Nfse.InfNfse.DataEmissao;
            }
        }

        public string Chave
        {
            get
            {
                return Nfse.InfNfse.CodigoVerificacao;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref tcCompNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref tcCompNfse obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static tcCompNfse Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                string result = xml.Replace("ns1:", string.Empty).Replace("ns2:", string.Empty).Replace("ns3:", string.Empty).Replace("ns4:", string.Empty).Replace("ns5:", string.Empty).Replace(":ns1", string.Empty).Replace(":ns2", string.Empty).Replace(":ns3", string.Empty).Replace(":ns4", string.Empty).Replace(":ns5", string.Empty).Replace("xmlns=\"http://www.ginfes.com.br/servico_cancelar_nfse_envio\"", string.Empty).Replace("xmlns=\"http://www.ginfes.com.br/tipos\"", string.Empty).Replace("xmlns=\"http://www.ginfes.com.br/servico_consultar_nfse_envio\"", string.Empty).Replace("xmlns=\"http://www.w3.org/2000/09/xmldsig#\"", string.Empty);
                stringReader = new System.IO.StringReader(result);
                // stringReader.ReadToEnd() 'TESTING...
                return (tcCompNfse)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), tcCompNfse)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tcCompNfse Deserialize(System.IO.Stream s)
        {
            return (tcCompNfse)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref tcCompNfse obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source, false);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref tcCompNfse obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static tcCompNfse LoadFrom(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null & close_stream == true)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<tcCompNfse> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    public partial class NFSe : INotifyPropertyChanged
    {
        private abInfNfse infNfseField;
        private List<SignatureType> signatureField;
        private static XmlSerializer sSerializer;

        public NFSe() : base()
        {
            signatureField = new List<SignatureType>();
            infNfseField = new abInfNfse();
        }

        [XmlElement("InfNfse")]
        public abInfNfse InfNfse
        {
            get
            {
                return infNfseField;
            }

            set
            {
                if (infNfseField is null || infNfseField.Equals(value) != true)
                {
                    infNfseField = value;
                    OnPropertyChanged("InfNfse");
                }
            }
        }

        [XmlElement("Signature", Namespace = "http://www.w3.org/2000/09/xmldsig#")]
        public List<SignatureType> Signature
        {
            get
            {
                return signatureField;
            }

            set
            {
                if (signatureField is null || signatureField.Equals(value) != true)
                {
                    signatureField = value;
                    OnPropertyChanged("Signature");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(NFSe));
                }

                return sSerializer;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref NFSe obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref NFSe obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static NFSe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (NFSe)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), NFSe)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFSe Deserialize(System.IO.Stream s)
        {
            return (NFSe)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(System.IO.Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(System.IO.Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new System.IO.StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(System.IO.Stream source, ref NFSe obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(System.IO.Stream source, ref NFSe obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static NFSe LoadFrom(System.IO.Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<NFSe> LoadFromAsync(System.IO.Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            System.IO.StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new System.IO.StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "4.0.30319.33440")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType()]
    public partial class abInfNfse : INotifyPropertyChanged
    {
        private string numeroField;
        private string codigoVerificacaoField;
        private DateTime dataEmissaoField;
        private tcDadosPrestador prestadorServicoField;
        private tcDadosTomador tomadorServicoField;
        private tcIdentificacaoOrgaoGerador orgaoGeradorField;
        private tcValores valoresField;
        private string idField;
        private DeclaracaoPrestacaoServico _dec = new DeclaracaoPrestacaoServico();

        public abInfNfse() : base()
        {
        }

        [XmlElement(DataType = "nonNegativeInteger")]
        public string Numero
        {
            get
            {
                return numeroField;
            }

            set
            {
                if (numeroField is null || numeroField.Equals(value) != true)
                {
                    numeroField = value;
                    OnPropertyChanged("Numero");
                }
            }
        }

        public string CodigoVerificacao
        {
            get
            {
                return codigoVerificacaoField;
            }

            set
            {
                if (codigoVerificacaoField is null || codigoVerificacaoField.Equals(value) != true)
                {
                    codigoVerificacaoField = value;
                    OnPropertyChanged("CodigoVerificacao");
                }
            }
        }

        public DateTime DataEmissao
        {
            get
            {
                return dataEmissaoField;
            }

            set
            {
                if (dataEmissaoField.Equals(value) != true)
                {
                    dataEmissaoField = value;
                    OnPropertyChanged("DataEmissao");
                }
            }
        }

        public tcDadosPrestador PrestadorServico
        {
            get
            {
                return prestadorServicoField;
            }

            set
            {
                if (prestadorServicoField is null || prestadorServicoField.Equals(value) != true)
                {
                    prestadorServicoField = value;
                    OnPropertyChanged("PrestadorServico");
                }
            }
        }

        public tcDadosTomador TomadorServico
        {
            get
            {
                return tomadorServicoField;
            }

            set
            {
                if (tomadorServicoField is null || tomadorServicoField.Equals(value) != true)
                {
                    tomadorServicoField = value;
                    OnPropertyChanged("TomadorServico");
                }
            }
        }

        public tcIdentificacaoOrgaoGerador OrgaoGerador
        {
            get
            {
                return orgaoGeradorField;
            }

            set
            {
                if (orgaoGeradorField is null || orgaoGeradorField.Equals(value) != true)
                {
                    orgaoGeradorField = value;
                    OnPropertyChanged("OrgaoGerador");
                }
            }
        }

        public tcValores ValoresNfse
        {
            get
            {
                return valoresField;
            }

            set
            {
                if (valoresField is null || valoresField.Equals(value) != true)
                {
                    valoresField = value;
                    OnPropertyChanged("ValoresNfse");
                }
            }
        }

        [XmlAttribute()]
        public string Id
        {
            get
            {
                return idField;
            }

            set
            {
                if (idField is null || idField.Equals(value) != true)
                {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }

        [XmlElement("DeclaracaoPrestacaoServico")]
        public DeclaracaoPrestacaoServico Declaracao
        {
            get
            {
                return _dec;
            }

            set
            {
                _dec = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class DeclaracaoPrestacaoServico
    {
        private tcInfNfse _inf = new tcInfNfse();

        [XmlElement("InfDeclaracaoPrestacaoServico")]
        public tcInfNfse InfNfse
        {
            get
            {
                return _inf;
            }

            set
            {
                _inf = value;
            }
        }
    }

    /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
}