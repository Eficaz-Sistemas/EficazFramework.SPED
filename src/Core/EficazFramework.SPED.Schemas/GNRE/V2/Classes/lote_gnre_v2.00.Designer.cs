// ' ------------------------------------------------------------------------------
// '  <auto-generated>
// '    Generated by Xsd2Code. Version 3.6.0.0
// '    <NameSpace>EficazFramework.SPED</NameSpace><Collection>ObservableCollection</Collection><codeType>VisualBasic</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
// '  </auto-generated>
// ' ------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Xml.Serialization;
using EficazFramework.SPED.Extensions;
using Microsoft.VisualBasic.CompilerServices;

namespace EficazFramework.SPED.Schemas.GNRE.V2
{
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    [XmlRoot("TLote_GNRE", Namespace = "http://www.gnre.pe.gov.br", IsNullable = false)]
    public partial class LoteGNRE : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public LoteGNRE() : base()
        {
            guiasField = new ObservableCollection<GuiaGNRE>();
            versaoField = "2.00";
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private ObservableCollection<GuiaGNRE> guiasField;
        private string versaoField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlArrayItem("TDadosGNRE", IsNullable = false)]
        public ObservableCollection<GuiaGNRE> guias
        {
            get
            {
                return guiasField;
            }

            set
            {
                if (guiasField is null || guiasField.Equals(value) != true)
                {
                    guiasField = value;
                    OnPropertyChanged("guias");
                }
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                versaoField = value;
                OnPropertyChanged("versao");
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(LoteGNRE));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref LoteGNRE obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref LoteGNRE obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static LoteGNRE Deserialize(string xml)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (LoteGNRE)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), LoteGNRE)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LoteGNRE Deserialize(Stream s)
        {
            return (LoteGNRE)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(Stream source, ref LoteGNRE obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(Stream source, ref LoteGNRE obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static LoteGNRE LoadFrom(Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<LoteGNRE> LoadFromAsync(Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<LoteGNRE> LoadFromAsync(Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class GuiaGNRE : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public GuiaGNRE() : base()
        {
            c39_camposExtrasField = new ObservableCollection<CampoExtra>();
            itensGNREField = new ObservableCollection<DetalhamentoItemGNRE>();
            c05_referenciaField = new Referencia();
            c35_idContribuinteDestinatarioField = new IDDestinatario();
            c03_idContribuinteEmitenteField = new IDEmitente();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private UF? c01_UfFavorecidaField = default;
        private double? c02_receitaField;
        private IDEmitente c03_idContribuinteEmitenteField;
        private string c04_docOrigemField;
        private Referencia c05_referenciaField;
        private string c06_valorPrincipalField; // Double?
        private string c10_valorTotalField; // Double?
        private string c14_dataVencimentoField;
        private string c15_convenioField;
        private string c16_razaoSocialEmitenteField;
        private string c17_inscricaoEstadualEmitenteField;
        private string c18_enderecoEmitenteField;
        private string c19_municipioEmitenteField;
        private string c20_ufEnderecoEmitenteField;
        private string c21_cepEmitenteField;
        private string c22_telefoneEmitenteField;
        private string c25_detalhamentoReceitaField;
        private string c26_produtoField;
        private Identificacao? c27_tipoIdentificacaoEmitenteField = default;
        private string c28_tipoDocOrigemField;
        private string c33_dataPagamentoField;
        private Identificacao? c34_tipoIdentificacaoDestinatarioField = default;
        private IDDestinatario c35_idContribuinteDestinatarioField;
        private string c36_inscricaoEstadualDestinatarioField;
        private string c37_razaoSocialDestinatarioField;
        private string c38_municipioDestinatarioField;
        private ObservableCollection<CampoExtra> c39_camposExtrasField;
        private string c42_identificadorGuiaField = null;
        // 2.00 NEW
        private Emitente contribuinteEmitenteField;
        private string dataPagamentoField;
        private string identificadorGuiaField = null;
        private ObservableCollection<DetalhamentoItemGNRE> itensGNREField;
        private TipoGNRE? tipoGnreField = default;
        private UF? ufFavorecidaField = default;
        private string valorGNREField; // Double?
        private Versao versaoField = Versao.v2_00;

        // Serialize
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public UF? c01_UfFavorecida
        {
            get
            {
                return c01_UfFavorecidaField;
            }

            set
            {
                c01_UfFavorecidaField = value;
                OnPropertyChanged("c01_UfFavorecida");
            }
        }

        public bool ShouldSerializec01_UfFavorecida()
        {
            return c01_UfFavorecidaField.HasValue;
        }

        public double? c02_receita
        {
            get
            {
                return c02_receitaField;
            }

            set
            {
                if (c02_receitaField is null || c02_receitaField.Equals(value) != true)
                {
                    c02_receitaField = value;
                    OnPropertyChanged("c02_receita");
                }
            }
        }

        public bool ShouldSerializec02_receita()
        {
            return c02_receitaField.HasValue;
        }

        public IDEmitente c03_idContribuinteEmitente
        {
            get
            {
                return c03_idContribuinteEmitenteField;
            }

            set
            {
                if (c03_idContribuinteEmitenteField is null || c03_idContribuinteEmitenteField.Equals(value) != true)
                {
                    c03_idContribuinteEmitenteField = value;
                    OnPropertyChanged("c03_idContribuinteEmitente");
                }
            }
        }

        public string c04_docOrigem
        {
            get
            {
                return c04_docOrigemField;
            }

            set
            {
                if (c04_docOrigemField is null || c04_docOrigemField.Equals(value) != true)
                {
                    c04_docOrigemField = value;
                    OnPropertyChanged("c04_docOrigem");
                }
            }
        }

        public Referencia c05_referencia
        {
            get
            {
                return c05_referenciaField;
            }

            set
            {
                if (c05_referenciaField is null || c05_referenciaField.Equals(value) != true)
                {
                    c05_referenciaField = value;
                    OnPropertyChanged("c05_referencia");
                }
            }
        }

        public string c06_valorPrincipal
        {
            get
            {
                return c06_valorPrincipalField;
            }

            set
            {
                if (c06_valorPrincipalField is null || c06_valorPrincipalField.Equals(value) != true)
                {
                    c06_valorPrincipalField = value;
                    OnPropertyChanged("c06_valorPrincipal");
                }
            }
        }

        public string c10_valorTotal
        {
            get
            {
                return c10_valorTotalField;
            }

            set
            {
                if (c10_valorTotalField is null || c10_valorTotalField.Equals(value) != true)
                {
                    c10_valorTotalField = value;
                    OnPropertyChanged("c10_valorTotal");
                }
            }
        }

        [XmlIgnore()]
        public DateTime? c14_dataVencimentoDate
        {
            get
            {
                return c14_dataVencimentoField.ToDate(DateFormat.XML_AAAAMMDD);
            }

            set
            {
                if (c14_dataVencimentoField is null || c14_dataVencimentoField.Equals(value) != true)
                {
                    c14_dataVencimentoField = Conversions.ToString(value);
                    OnPropertyChanged("c14_dataVencimentoDate");
                    if (value.HasValue)
                    {
                        string result = string.Format("{0:yyyy-MM-dd}", value.Value);
                        if ((c14_dataVencimento ?? "") != (result ?? ""))
                        {
                            c14_dataVencimento = result;
                        }
                    }
                    else
                    {
                        c14_dataVencimento = null;
                    }
                }
            }
        }

        public string c14_dataVencimento
        {
            get
            {
                return c14_dataVencimentoField;
            }

            set
            {
                if (c14_dataVencimentoField is null || c14_dataVencimentoField.Equals(value) != true)
                {
                    c14_dataVencimentoField = value;
                    OnPropertyChanged("c14_dataVencimento");
                    if (string.IsNullOrEmpty(value) | string.IsNullOrWhiteSpace(value))
                    {
                        c14_dataVencimentoDate = default;
                    }
                    else
                    {
                        var result = value.Split("-");
                        var dt = new DateTime(Conversions.ToInteger(result[0]), Conversions.ToInteger(result[1]), Conversions.ToInteger(result[2]));
                        if (c14_dataVencimentoDate != dt == true)
                        {
                            c14_dataVencimentoDate = dt;
                        }
                    }
                }
            }
        }

        public string c15_convenio
        {
            get
            {
                return c15_convenioField;
            }

            set
            {
                if (c15_convenioField is null || c15_convenioField.Equals(value) != true)
                {
                    c15_convenioField = value;
                    OnPropertyChanged("c15_convenio");
                }
            }
        }

        public string c16_razaoSocialEmitente
        {
            get
            {
                return c16_razaoSocialEmitenteField;
            }

            set
            {
                if (c16_razaoSocialEmitenteField is null || c16_razaoSocialEmitenteField.Equals(value) != true)
                {
                    c16_razaoSocialEmitenteField = value;
                    OnPropertyChanged("c16_razaoSocialEmitente");
                }
            }
        }

        public string c17_inscricaoEstadualEmitente
        {
            get
            {
                return c17_inscricaoEstadualEmitenteField;
            }

            set
            {
                if (c17_inscricaoEstadualEmitenteField is null || c17_inscricaoEstadualEmitenteField.Equals(value) != true)
                {
                    c17_inscricaoEstadualEmitenteField = value;
                    OnPropertyChanged("c17_inscricaoEstadualEmitente");
                }
            }
        }

        public string c18_enderecoEmitente
        {
            get
            {
                return c18_enderecoEmitenteField;
            }

            set
            {
                if (c18_enderecoEmitenteField is null || c18_enderecoEmitenteField.Equals(value) != true)
                {
                    c18_enderecoEmitenteField = value;
                    OnPropertyChanged("c18_enderecoEmitente");
                }
            }
        }

        public string c19_municipioEmitente
        {
            get
            {
                return c19_municipioEmitenteField;
            }

            set
            {
                if (c19_municipioEmitenteField is null || c19_municipioEmitenteField.Equals(value) != true)
                {
                    c19_municipioEmitenteField = value;
                    OnPropertyChanged("c19_municipioEmitente");
                }
            }
        }

        public string c20_ufEnderecoEmitente
        {
            get
            {
                return c20_ufEnderecoEmitenteField;
            }

            set
            {
                if (c20_ufEnderecoEmitenteField is null || c20_ufEnderecoEmitenteField.Equals(value) != true)
                {
                    c20_ufEnderecoEmitenteField = value;
                    OnPropertyChanged("c20_ufEnderecoEmitente");
                }
            }
        }

        public string c21_cepEmitente
        {
            get
            {
                return c21_cepEmitenteField;
            }

            set
            {
                if (c21_cepEmitenteField is null || c21_cepEmitenteField.Equals(value) != true)
                {
                    c21_cepEmitenteField = value;
                    OnPropertyChanged("c21_cepEmitente");
                }
            }
        }

        public string c22_telefoneEmitente
        {
            get
            {
                return c22_telefoneEmitenteField;
            }

            set
            {
                if (c22_telefoneEmitenteField is null || c22_telefoneEmitenteField.Equals(value) != true)
                {
                    c22_telefoneEmitenteField = value;
                    OnPropertyChanged("c22_telefoneEmitente");
                }
            }
        }

        public string c25_detalhamentoReceita
        {
            get
            {
                return c25_detalhamentoReceitaField;
            }

            set
            {
                if (c25_detalhamentoReceitaField is null || c25_detalhamentoReceitaField.Equals(value) != true)
                {
                    c25_detalhamentoReceitaField = value;
                    OnPropertyChanged("c25_detalhamentoReceita");
                }
            }
        }

        public string c26_produto
        {
            get
            {
                return c26_produtoField;
            }

            set
            {
                if (c26_produtoField is null || c26_produtoField.Equals(value) != true)
                {
                    c26_produtoField = value;
                    OnPropertyChanged("c26_produto");
                }
            }
        }

        public Identificacao? c27_tipoIdentificacaoEmitente
        {
            get
            {
                // If Me.c27_tipoIdentificacaoEmitenteField.HasValue Then
                return c27_tipoIdentificacaoEmitenteField;
                // Else
                // CType(Nothing, Identificacao)
                // End If
            }

            set
            {
                // If (c27_tipoIdentificacaoEmitenteField.Equals(value) <> True) Then
                c27_tipoIdentificacaoEmitenteField = value;
                OnPropertyChanged("c27_tipoIdentificacaoEmitente");
                // End If
            }
        }

        public bool ShouldSerializec27_tipoIdentificacaoEmitente()
        {
            return c27_tipoIdentificacaoEmitente.HasValue;
        }

        public string c28_tipoDocOrigem
        {
            get
            {
                return c28_tipoDocOrigemField;
            }

            set
            {
                if (c28_tipoDocOrigemField is null || c28_tipoDocOrigemField.Equals(value) != true)
                {
                    c28_tipoDocOrigemField = value;
                    OnPropertyChanged("c28_tipoDocOrigem");
                }
            }
        }

        [XmlIgnore()]
        public DateTime? c33_dataPagamentoDate
        {
            get
            {
                return c33_dataPagamentoField.ToDate(DateFormat.XML_AAAAMMDD);
            }

            set
            {
                if (c33_dataPagamentoField is null || c33_dataPagamentoField.Equals(value) != true)
                {
                    c33_dataPagamentoField = Conversions.ToString(value);
                    OnPropertyChanged("c33_dataPagamentoDate");
                    if (value.HasValue)
                    {
                        string result = string.Format("{0:yyyy-MM-dd}", value.Value);
                        if ((c33_dataPagamento ?? "") != (result ?? ""))
                        {
                            c33_dataPagamento = result;
                        }
                    }
                    else
                    {
                        c33_dataPagamento = null;
                    }
                }
            }
        }

        public string c33_dataPagamento
        {
            get
            {
                return c33_dataPagamentoField;
            }

            set
            {
                if (c33_dataPagamentoField is null || c33_dataPagamentoField.Equals(value) != true)
                {
                    c33_dataPagamentoField = value;
                    OnPropertyChanged("c33_dataPagamento");
                    if (string.IsNullOrEmpty(value) | string.IsNullOrWhiteSpace(value))
                    {
                        c33_dataPagamentoField = null;
                    }
                    else
                    {
                        var result = value.Split("-");
                        var dt = new DateTime(Conversions.ToInteger(result[0]), Conversions.ToInteger(result[1]), Conversions.ToInteger(result[2]));
                        if (Conversions.ToDate(c33_dataPagamentoField) != dt)
                        {
                            c33_dataPagamentoField = Conversions.ToString(dt);
                        }
                    }
                }
            }
        }

        public Identificacao? c34_tipoIdentificacaoDestinatario
        {
            get
            {
                return c34_tipoIdentificacaoDestinatarioField.Value;
                // If Me.c34_tipoIdentificacaoDestinatarioField.HasValue Then
                // Return Me.c34_tipoIdentificacaoDestinatarioField.Value
                // Else
                // Return CType(Nothing, Identificacao?)
                // End If
            }

            set
            {
                if (c34_tipoIdentificacaoDestinatarioField.Equals(value) != true)
                {
                    c34_tipoIdentificacaoDestinatarioField = value;
                    OnPropertyChanged("c34_tipoIdentificacaoDestinatario");
                }
            }
        }

        [XmlIgnore()]
        public bool c34_tipoIdentificacaoDestinatarioSpecified
        {
            get
            {
                return c34_tipoIdentificacaoDestinatarioField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    c34_tipoIdentificacaoDestinatarioField = default;
                }
            }
        }

        public IDDestinatario c35_idContribuinteDestinatario
        {
            get
            {
                return c35_idContribuinteDestinatarioField;
            }

            set
            {
                if (c35_idContribuinteDestinatarioField is null || c35_idContribuinteDestinatarioField.Equals(value) != true)
                {
                    c35_idContribuinteDestinatarioField = value;
                    OnPropertyChanged("c35_idContribuinteDestinatario");
                }
            }
        }

        public string c36_inscricaoEstadualDestinatario
        {
            get
            {
                return c36_inscricaoEstadualDestinatarioField;
            }

            set
            {
                if (c36_inscricaoEstadualDestinatarioField is null || c36_inscricaoEstadualDestinatarioField.Equals(value) != true)
                {
                    c36_inscricaoEstadualDestinatarioField = value;
                    OnPropertyChanged("c36_inscricaoEstadualDestinatario");
                }
            }
        }

        public string c37_razaoSocialDestinatario
        {
            get
            {
                return c37_razaoSocialDestinatarioField;
            }

            set
            {
                if (c37_razaoSocialDestinatarioField is null || c37_razaoSocialDestinatarioField.Equals(value) != true)
                {
                    c37_razaoSocialDestinatarioField = value;
                    OnPropertyChanged("c37_razaoSocialDestinatario");
                }
            }
        }

        public string c38_municipioDestinatario
        {
            get
            {
                return c38_municipioDestinatarioField;
            }

            set
            {
                if (c38_municipioDestinatarioField is null || c38_municipioDestinatarioField.Equals(value) != true)
                {
                    c38_municipioDestinatarioField = value;
                    OnPropertyChanged("c38_municipioDestinatario");
                }
            }
        }

        [XmlArrayItem("campoExtra", IsNullable = false)]
        public ObservableCollection<CampoExtra> c39_camposExtras
        {
            get
            {
                return c39_camposExtrasField;
            }

            set
            {
                if (c39_camposExtrasField is null || c39_camposExtrasField.Equals(value) != true)
                {
                    c39_camposExtrasField = value;
                    OnPropertyChanged("c39_camposExtras");
                }
            }
        }

        public bool ShouldSerializec39_camposExtras()
        {
            return c39_camposExtrasField.Count > 0; // Me.c10_valorTotalField.HasValue
        }

        public string c42_identificadorGuia
        {
            get
            {
                return c42_identificadorGuiaField;
            }

            set
            {
                if (c42_identificadorGuiaField is null || c42_identificadorGuiaField.Equals(value) != true)
                {
                    c42_identificadorGuiaField = value;
                    OnPropertyChanged("c42_identificadorGuia");
                }
            }
        }

        public bool ShouldSerializec42_identificadorGuia()
        {
            return c42_identificadorGuiaField != null;
        }

        // NEW 2.00

        public UF? ufFavorecida
        {
            get
            {
                return ufFavorecidaField;
            }

            set
            {
                ufFavorecidaField = value;
                OnPropertyChanged("ufFavorecida");
            }
        }

        public bool ShouldSerializeufFavorecida()
        {
            return ufFavorecidaField.HasValue;
        }

        public TipoGNRE? tipoGnre
        {
            get
            {
                return tipoGnreField;
            }

            set
            {
                tipoGnreField = value;
                OnPropertyChanged("tipoGnre");
            }
        }

        public bool ShouldSerializetipoGnre()
        {
            return tipoGnreField.HasValue;
        }

        public Emitente contribuinteEmitente
        {
            get
            {
                return contribuinteEmitenteField;
            }

            set
            {
                if (contribuinteEmitenteField is null || contribuinteEmitenteField.Equals(value) != true)
                {
                    contribuinteEmitenteField = value;
                    OnPropertyChanged("contribuinteEmitente");
                }
            }
        }

        [XmlArray()]
        [XmlArrayItem("item", IsNullable = false)]
        public ObservableCollection<DetalhamentoItemGNRE> itensGNRE
        {
            get
            {
                return itensGNREField;
            }

            set
            {
                if (itensGNREField is null || itensGNREField.Equals(value) != true)
                {
                    itensGNREField = value;
                    OnPropertyChanged("itensGNRE");
                }
            }
        }

        public string valorGNRE
        {
            get
            {
                return valorGNREField;
            }

            set
            {
                if (valorGNREField is null || valorGNREField.Equals(value) != true)
                {
                    valorGNREField = value;
                    OnPropertyChanged("valorGNRE");
                }
            }
        }

        [XmlIgnore()]
        public DateTime? dataPagamentoDate
        {
            get
            {
                return dataPagamentoField.ToDate(DateFormat.XML_AAAAMMDD);
            }

            set
            {
                if (dataPagamentoField is null || dataPagamentoField.Equals(value) != true)
                {
                    dataPagamentoField = Conversions.ToString(value);
                    OnPropertyChanged("dataPagamentoDate");
                    if (value.HasValue)
                    {
                        string result = string.Format("{0:yyyy-MM-dd}", value.Value);
                        if ((dataPagamento ?? "") != (result ?? ""))
                        {
                            dataPagamento = result;
                        }
                    }
                    else
                    {
                        dataPagamento = null;
                    }
                }
            }
        }

        public string dataPagamento
        {
            get
            {
                return dataPagamentoField;
            }

            set
            {
                if (dataPagamentoField is null || dataPagamentoField.Equals(value) != true)
                {
                    dataPagamentoField = value;
                    OnPropertyChanged("dataPagamento");
                    if (string.IsNullOrEmpty(value) | string.IsNullOrWhiteSpace(value))
                    {
                        dataPagamentoField = null;
                    }
                    else
                    {
                        var result = value.Split("-");
                        var dt = new DateTime(Conversions.ToInteger(result[0]), Conversions.ToInteger(result[1]), Conversions.ToInteger(result[2]));
                        if (Conversions.ToDate(dataPagamentoField) != dt)
                        {
                            dataPagamentoField = Conversions.ToString(dt);
                        }
                    }
                }
            }
        }

        public string identificadorGuia
        {
            get
            {
                return identificadorGuiaField;
            }

            set
            {
                if (identificadorGuiaField is null || identificadorGuiaField.Equals(value) != true)
                {
                    identificadorGuiaField = value;
                    OnPropertyChanged("identificadorGuia");
                }
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public Versao versao
        {
            get
            {
                return versaoField;
            }

            set
            {
                versaoField = value;
                OnPropertyChanged("versao");
            }
        }


        // Serialize

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(GuiaGNRE));
                }

                return sSerializer;
            }
        }


        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        /// <summary>
        /// Serializes current TNfeProc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0L, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if (streamReader != null)
                {
                    streamReader.Dispose();
                }

                if (memoryStream != null)
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanDeserialize(string xml, ref GuiaGNRE obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanDeserialize(string xml, ref GuiaGNRE obj)
        {
            Exception exception = null;
            return CanDeserialize(xml, ref obj, ref exception);
        }

        public static GuiaGNRE Deserialize(string xml)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(xml);
                // stringReader.ReadToEnd() 'TESTING...
                return (GuiaGNRE)Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader));
            }
            // Return CType(Serializer.Deserialize(stringReader), GuiaGNRE)
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GuiaGNRE Deserialize(Stream s)
        {
            return (GuiaGNRE)Serializer.Deserialize(s);
        }


        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="target">target stream of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool CanSaveToFile(Stream target, ref Exception exception)
        {
            exception = null;
            try
            {
                SaveTo(target);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveTo(Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                // Dim xmlFile As System.IO.FileInfo = New System.IO.FileInfo(fileName)
                // streamWriter = xmlFile.CreateText
                streamWriter.WriteLine(xmlString);
                streamWriter.Flush();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }

        public virtual async void SaveToAsync(Stream target)
        {
            if (target is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Save_NullStreamExceptionMessage);
            var streamWriter = new StreamWriter(target);
            try
            {
                string xmlString = Serialize();
                await streamWriter.WriteLineAsync(xmlString);
                await streamWriter.FlushAsync();
            }
            finally
            {
                if (streamWriter != null)
                {
                    streamWriter.Dispose();
                }
            }
        }


        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="source">target stream of outupt xml file</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool CanLoadFrom(Stream source, ref GuiaGNRE obj, ref Exception exception)
        {
            exception = null;
            obj = default;
            try
            {
                obj = LoadFrom(source);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool CanLoadFrom(Stream source, ref GuiaGNRE obj)
        {
            Exception exception = null;
            return CanLoadFrom(source, ref obj, ref exception);
        }

        public static GuiaGNRE LoadFrom(Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = sr.ReadToEnd();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<GuiaGNRE> LoadFromAsync(Stream source)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (source != null)
                {
                    source.Dispose();
                }

                if (sr != null)
                {
                    sr.Dispose();
                }
            }
        }

        public static async Task<GuiaGNRE> LoadFromAsync(Stream source, bool close_stream = true)
        {
            if (source is null)
                throw new ArgumentException(Resources.Strings.Validation.Classes_Load_NullStreamExceptionMessage);
            StreamReader sr = null;
            try
            {
                // file = New System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read)
                sr = new StreamReader(source);
                string xmlString = await sr.ReadToEndAsync();
                // sr.Close()
                // file.Close()
                return Deserialize(xmlString);
            }
            finally
            {
                if (sr != null & close_stream == true)
                {
                    sr.Dispose();
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class IDEmitente : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string itemField;
        private PersonalidadeJuridica itemElementNameField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlChoiceIdentifier("PersonalidadeJuridica")]
        public string CNPJ_CPF
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("CNPJ_CPF");
                }
            }
        }

        [XmlIgnore()]
        public PersonalidadeJuridica PersonalidadeJuridica
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("PersonalidadeJuridica");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(IDEmitente));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class IDDestinatario : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private string itemField;
        private PersonalidadeJuridica itemElementNameField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        [XmlElement("CNPJ", typeof(string))]
        [XmlElement("CPF", typeof(string))]
        [XmlChoiceIdentifier("PersonalidadeJuridica")]
        public string CNPJ_CPF
        {
            get
            {
                return itemField;
            }

            set
            {
                if (itemField is null || itemField.Equals(value) != true)
                {
                    itemField = value;
                    OnPropertyChanged("CNPJ_CPF");
                }
            }
        }

        [XmlIgnore()]
        public PersonalidadeJuridica PersonalidadeJuridica
        {
            get
            {
                return itemElementNameField;
            }

            set
            {
                if (itemElementNameField.Equals(value) != true)
                {
                    itemElementNameField = value;
                    OnPropertyChanged("PersonalidadeJuridica");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(IDDestinatario));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class Referencia : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private ReferenciaPeriodo? periodoField;
        private Mes? mesField;
        private int? anoField;
        private string parcelaField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public ReferenciaPeriodo periodo
        {
            get
            {
                if (periodoField.HasValue)
                {
                    return periodoField.Value;
                }
                else
                {
                    return (ReferenciaPeriodo)Conversions.ToInteger(default);
                }
            }

            set
            {
                if (periodoField.Equals(value) != true)
                {
                    periodoField = value;
                    OnPropertyChanged("periodo");
                }
            }
        }

        [XmlIgnore()]
        public bool periodoSpecified
        {
            get
            {
                return periodoField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    periodoField = default;
                }
            }
        }

        public Mes mes
        {
            get
            {
                if (mesField.HasValue)
                {
                    return mesField.Value;
                }
                else
                {
                    return (Mes)Conversions.ToInteger(default);
                }
            }

            set
            {
                if (mesField.Equals(value) != true)
                {
                    mesField = value;
                    OnPropertyChanged("mes");
                }
            }
        }

        [XmlIgnore()]
        public bool mesSpecified
        {
            get
            {
                return mesField.HasValue;
            }

            set
            {
                if (value == false)
                {
                    mesField = default;
                }
            }
        }

        public int? ano
        {
            get
            {
                return anoField;
            }

            set
            {
                if (anoField is null || anoField.Equals(value) != true)
                {
                    anoField = value;
                    OnPropertyChanged("ano");
                }
            }
        }

        public bool ShouldSerializeano()
        {
            return anoField.HasValue;
        }

        public string parcela
        {
            get
            {
                return parcelaField;
            }

            set
            {
                if (parcelaField is null || parcelaField.Equals(value) != true)
                {
                    parcelaField = value;
                    OnPropertyChanged("parcela");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(Referencia));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class CampoExtra : INotifyPropertyChanged
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private int codigoField;
        private TipoCampoExtra? tipoField;
        private string valorField;
        private static XmlSerializer sSerializer;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public int codigo
        {
            get
            {
                return codigoField;
            }

            set
            {
                if (codigoField.Equals(value) != true)
                {
                    codigoField = value;
                    OnPropertyChanged("codigo");
                }
            }
        }

        public TipoCampoExtra? tipo
        {
            get
            {
                return tipoField;
            }

            set
            {
                if (tipoField.Equals(value) != true)
                {
                    tipoField = value;
                    OnPropertyChanged("tipo");
                }
            }
        }

        public bool ShouldSerializetipo()
        {
            return tipoField.HasValue;
        }

        public string valor
        {
            get
            {
                return valorField;
            }

            set
            {
                if (valorField is null || valorField.Equals(value) != true)
                {
                    valorField = value;
                    OnPropertyChanged("valor");
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if (sSerializer is null)
                {
                    sSerializer = new XmlSerializer(typeof(CampoExtra));
                }

                return sSerializer;
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public virtual void OnPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public event PropertyChangedEventHandler PropertyChanged;

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }

    // 2.00

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class Emitente : object, INotifyPropertyChanged
    {
        private TIdentificacao identificacaoField;
        private string razaoSocialField;
        private string enderecoField;
        private string municipioField;
        private UF ufField;
        private bool ufFieldSpecified;
        private string cepField;
        private string telefoneField;

        /// <remarks/>
        [XmlElement(Order = 0)]
        public TIdentificacao identificacao
        {
            get
            {
                return identificacaoField;
            }

            set
            {
                identificacaoField = value;
                OnPropertyChanged("identificacao");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 1)]
        public string razaoSocial
        {
            get
            {
                return razaoSocialField;
            }

            set
            {
                razaoSocialField = value;
                OnPropertyChanged("razaoSocial");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 2)]
        public string endereco
        {
            get
            {
                return enderecoField;
            }

            set
            {
                enderecoField = value;
                OnPropertyChanged("endereco");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 3)]
        public string municipio
        {
            get
            {
                return municipioField;
            }

            set
            {
                municipioField = value;
                OnPropertyChanged("municipio");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 4)]
        public UF uf
        {
            get
            {
                return ufField;
            }

            set
            {
                ufField = value;
                OnPropertyChanged("uf");
            }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ufSpecified
        {
            get
            {
                return ufFieldSpecified;
            }

            set
            {
                ufFieldSpecified = value;
                OnPropertyChanged("ufSpecified");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 5)]
        public string cep
        {
            get
            {
                return cepField;
            }

            set
            {
                cepField = value;
                OnPropertyChanged("cep");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 6)]
        public string telefone
        {
            get
            {
                return telefoneField;
            }

            set
            {
                telefoneField = value;
                OnPropertyChanged("telefone");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class Destinatario : object, INotifyPropertyChanged
    {
        private TIdentificacao identificacaoField;
        private string razaoSocialField;
        private string municipioField;

        /// <remarks/>
        [XmlElement(Order = 0)]
        public TIdentificacao identificacao
        {
            get
            {
                return identificacaoField;
            }

            set
            {
                identificacaoField = value;
                OnPropertyChanged("identificacao");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 1)]
        public string razaoSocial
        {
            get
            {
                return razaoSocialField;
            }

            set
            {
                razaoSocialField = value;
                OnPropertyChanged("razaoSocial");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 2)]
        public string municipio
        {
            get
            {
                return municipioField;
            }

            set
            {
                municipioField = value;
                OnPropertyChanged("municipio");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.gnre.pe.gov.br")]
    public partial class TIdentificacao : object, INotifyPropertyChanged
    {
        private string cNPJField;
        private string cPFField;
        private string ieField;

        /// <remarks/>
        [XmlElement(Order = 0)]
        public string CNPJ
        {
            get
            {
                return cNPJField;
            }

            set
            {
                cNPJField = value;
                OnPropertyChanged("CNPJ");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 1)]
        public string CPF
        {
            get
            {
                return cPFField;
            }

            set
            {
                cPFField = value;
                OnPropertyChanged("CPF");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 2)]
        public string IE
        {
            get
            {
                return ieField;
            }

            set
            {
                ieField = value;
                OnPropertyChanged("IE");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class DetalhamentoItemGNRE : object, INotifyPropertyChanged
    {
        private string receitaField;
        private string detalhamentoReceitaField;
        private TipoDocumentoOrigem documentoOrigemField;
        private string produtoField;
        private Referencia referenciaField;
        private string dataVencimentoField;
        private ObservableCollection<ItemValor> valorField = new ObservableCollection<ItemValor>();
        private string convenioField;
        private Destinatario contribuinteDestinatarioField;
        private ObservableCollection<CampoExtra> camposExtrasField = new ObservableCollection<CampoExtra>();
        private string numeroControleField;
        private string numeroControleFecpField;

        /// <remarks/>
        [XmlElement(Order = 0)]
        public string receita
        {
            get
            {
                return receitaField;
            }

            set
            {
                receitaField = value;
                OnPropertyChanged("receita");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 1)]
        public string detalhamentoReceita
        {
            get
            {
                return detalhamentoReceitaField;
            }

            set
            {
                detalhamentoReceitaField = value;
                OnPropertyChanged("detalhamentoReceita");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 2)]
        public TipoDocumentoOrigem documentoOrigem
        {
            get
            {
                return documentoOrigemField;
            }

            set
            {
                documentoOrigemField = value;
                OnPropertyChanged("documentoOrigem");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 3)]
        public string produto
        {
            get
            {
                return produtoField;
            }

            set
            {
                produtoField = value;
                OnPropertyChanged("produto");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 4)]
        public Referencia referencia
        {
            get
            {
                return referenciaField;
            }

            set
            {
                referenciaField = value;
                OnPropertyChanged("referencia");
            }
        }

        [XmlIgnore()]
        public DateTime? dataVencimentoDate
        {
            get
            {
                return dataVencimentoField.ToDate(DateFormat.XML_AAAAMMDD);
            }

            set
            {
                if (dataVencimentoField is null || dataVencimentoField.Equals(value) != true)
                {
                    dataVencimentoField = Conversions.ToString(value);
                    OnPropertyChanged("dataVencimentoDate");
                    if (value.HasValue)
                    {
                        string result = string.Format("{0:yyyy-MM-dd}", value.Value);
                        if ((dataVencimento ?? "") != (result ?? ""))
                        {
                            dataVencimento = result;
                        }
                    }
                    else
                    {
                        dataVencimento = null;
                    }
                }
            }
        }

        /// <remarks/>
        [XmlElement(Order = 5)]
        public string dataVencimento
        {
            get
            {
                return dataVencimentoField;
            }

            set
            {
                dataVencimentoField = value;
                OnPropertyChanged("dataVencimento");
            }
        }

        /// <remarks/>
        [XmlElement("valor", Order = 6)]
        public ObservableCollection<ItemValor> valor
        {
            get
            {
                return valorField;
            }

            set
            {
                valorField = value;
                OnPropertyChanged("valor");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 7)]
        public string convenio
        {
            get
            {
                return convenioField;
            }

            set
            {
                convenioField = value;
                OnPropertyChanged("convenio");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 8)]
        public Destinatario contribuinteDestinatario
        {
            get
            {
                return contribuinteDestinatarioField;
            }

            set
            {
                contribuinteDestinatarioField = value;
                OnPropertyChanged("contribuinteDestinatario");
            }
        }

        /// <remarks/>
        [XmlArray(Order = 9)]
        [XmlArrayItem("campoExtra", IsNullable = false)]
        public ObservableCollection<CampoExtra> camposExtras
        {
            get
            {
                return camposExtrasField;
            }

            set
            {
                camposExtrasField = value;
                OnPropertyChanged("camposExtras");
            }
        }

        [XmlIgnore()]
        public bool ForcarCamposExtras { get; set; } = false;

        public bool ShouldSerializecamposExtras()
        {
            return camposExtras != null && (camposExtras.Count > 0 | ForcarCamposExtras == true) ; // Me.c10_valorTotalField.HasValue
        }

        /// <remarks/>
        [XmlElement(Order = 10)]
        public string numeroControle
        {
            get
            {
                return numeroControleField;
            }

            set
            {
                numeroControleField = value;
                OnPropertyChanged("numeroControle");
            }
        }

        /// <remarks/>
        [XmlElement(Order = 11)]
        public string numeroControleFecp
        {
            get
            {
                return numeroControleFecpField;
            }

            set
            {
                numeroControleFecpField = value;
                OnPropertyChanged("numeroControleFecp");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class TipoDocumentoOrigem : object, INotifyPropertyChanged
    {
        private string tipoField;
        private string valueField;

        /// <remarks/>
        [XmlAttribute()]
        public string tipo
        {
            get
            {
                return tipoField;
            }

            set
            {
                tipoField = value;
                OnPropertyChanged("tipo");
            }
        }

        /// <remarks/>
        [XmlText()]
        public string Value
        {
            get
            {
                return valueField;
            }

            set
            {
                valueField = value;
                OnPropertyChanged("Value");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true, Namespace = "http://www.gnre.pe.gov.br")]
    public partial class ItemValor : object, INotifyPropertyChanged
    {
        private TipoValor tipoField = TipoValor.VlrPrincICMS;
        private string valueField;

        /// <remarks/>
        [XmlAttribute()]
        public TipoValor tipo
        {
            get
            {
                return tipoField;
            }

            set
            {
                tipoField = value;
                OnPropertyChanged("tipo");
            }
        }

        /// <remarks/>
        [XmlText()]
        public string Value
        {
            get
            {
                return valueField;
            }

            set
            {
                valueField = value;
                OnPropertyChanged("Value");
            }
        }

        [XmlIgnore()]
        public double? NumericValue
        {
            get
            {
                if (Value is null)
                    return default;
                return Value.Replace(",", "").Replace(".", ",").ToNullableDouble();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged != null)
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}